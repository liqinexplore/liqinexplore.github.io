<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[react.js 组件之间state数据的传值]]></title>
      <url>https://qingege.github.io/2016/07/26/react/react_data/</url>
      <content type="html"><![CDATA[<h2 id="React-cloneElement"><a href="#React-cloneElement" class="headerlink" title="React.cloneElement"></a>React.cloneElement</h2><p>参数：TYPE（ReactElement），[PROPS（object）]，[CHILDREN（ReactElement）]<br>克隆并返回一个新的 ReactElement （内部子元素也会跟着克隆），<br>新返回的元素会保留有旧元素的 props、ref、key，也会集成新的 props（只要在第二个参数中有定义）。</p>
<p>通过React.cloneElement实现props数据之间的传值</p>
<h4 id="在父的组件中，将两个子组件的data传递出来"><a href="#在父的组件中，将两个子组件的data传递出来" class="headerlink" title="在父的组件中，将两个子组件的data传递出来"></a>在父的组件中，将两个子组件的data传递出来</h4> <a id="more"></a>
<p> 首先父组件定义header和main两个组件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">class Circle extends Component &#123;</div><div class="line">    constructor(props)&#123;</div><div class="line">        super(props);</div><div class="line">    &#125;</div><div class="line">    render() &#123;</div><div class="line">       let &#123; header, main &#125; = this.props</div><div class="line">       //此处非不得以判断层级，进而达到底层面板不展示的方式。理论上应该是有其他方式，去设置父组件属性。</div><div class="line">      content = ( &lt;div className=&quot;content_group&quot;&gt;</div><div class="line">           &#123;(!!header) ? (&lt;div className=&quot;content_header&quot;&gt;</div><div class="line">               &#123;header &amp;&amp; React.cloneElement(header, &#123;brodcast: (message)=&gt;main.props.getNotify(message)&#125;)&#125;</div><div class="line">           &lt;/div&gt;) : &quot;&quot;&#125;</div><div class="line">           &#123;(!!main) ? (&lt;div className=&quot;content_main&quot;&gt;&#123;main&#125;&lt;/div&gt;) : &quot;&quot;&#125;</div><div class="line">         </div><div class="line">       &lt;/div&gt;</div><div class="line">       ）</div><div class="line">                       </div><div class="line">               return (</div><div class="line">                   &lt;div&gt;</div><div class="line">                           &#123;content&#125;</div><div class="line">                   &lt;/div&gt;</div><div class="line">               )</div><div class="line">       </div><div class="line">&#125;</div><div class="line"></div><div class="line">module.exports = Circle;</div></pre></td></tr></table></figure></p>
<h3 id="在header-jsx-中赋值。在center-jsx中拿值"><a href="#在header-jsx-中赋值。在center-jsx中拿值" class="headerlink" title="在header.jsx 中赋值。在center.jsx中拿值"></a>在header.jsx 中赋值。在center.jsx中拿值</h3><h4 id="header-jsx"><a href="#header-jsx" class="headerlink" title="header.jsx"></a>header.jsx</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">class header extends Component &#123;</div><div class="line">    constructor(props) &#123;</div><div class="line">            super(props);</div><div class="line">             this.handleSubmit = this.handleSubmit.bind(this);</div><div class="line">            this.state = &#123;</div><div class="line">                circleID: &quot;1&quot;,</div><div class="line">                begin_time: &quot;2015.01.01&quot;,</div><div class="line">                title: &quot;内容&quot;,</div><div class="line">            &#125;;</div><div class="line">       &#125;</div><div class="line">       handleSubmit()&#123;</div><div class="line">          let Data = this.state;</div><div class="line">          this.props.brodcast(Data);</div><div class="line">       &#125;</div><div class="line">    render()&#123;</div><div class="line">        return(</div><div class="line">            &lt;a onClick=&#123;this.handleSubmit&#125;&gt;搜索&lt;/a&gt;</div><div class="line">        )</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">module.exports = header;</div></pre></td></tr></table></figure>
<p>###上面通过父组件中的this.props.brodcast()将值传入，在content.jsx接受值</p>
<h4 id="content-jsx"><a href="#content-jsx" class="headerlink" title="content.jsx"></a>content.jsx</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">var faThis = null;</div><div class="line">  class content extends Component &#123;</div><div class="line">      constructor(props) &#123;</div><div class="line">              super(props);</div><div class="line">            faThis = setTimeout(()=&gt; &#123;</div><div class="line">                faThis = this;</div><div class="line">                &#125;);</div><div class="line">              this.state = &#123;</div><div class="line">                  newdata: [],</div><div class="line">              &#125;;</div><div class="line">         &#125;</div><div class="line">         //获取传递过来的请求参数</div><div class="line">             getNotify(data) &#123;</div><div class="line">                 //将参数传递给后台。</div><div class="line">                 faThis.state.newdata = data;</div><div class="line">                faThis.forceUpdate();</div><div class="line">             &#125;</div><div class="line">      render()&#123;</div><div class="line">          return(</div><div class="line">              &lt;span&gt;&#123;this.state.newdata.title&#125;&lt;span&gt;</div><div class="line">          )</div><div class="line">      &#125;</div><div class="line">  &#125;</div><div class="line">  content.defaultProps = &#123;</div><div class="line">      getNotify: content.prototype.getNotify</div><div class="line">  &#125;;</div><div class="line">  module.exports = content;</div></pre></td></tr></table></figure>
<p>实现了 data之前传值，其中重新定义this为faThis是为了防止跟自身组件冲突。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[React 组件之间的传值]]></title>
      <url>https://qingege.github.io/2016/07/26/react/react_module/</url>
      <content type="html"><![CDATA[<h3 id="React-父组件和子组件之间的传值"><a href="#React-父组件和子组件之间的传值" class="headerlink" title="React 父组件和子组件之间的传值"></a>React 父组件和子组件之间的传值</h3><h4 id="主要是通过-this-props之间传值"><a href="#主要是通过-this-props之间传值" class="headerlink" title="主要是通过 this.props之间传值"></a>主要是通过 this.props之间传值</h4><p> <em>输出语句:export命令规定的是对外的接口，必须与模块内部的变量建立一一对应关系。<br>使用export命令定义了模块的对外接口以后，其他JS文件就可以通过import命令加载这个模块（文件）。
</em><br><a id="more"></a></p>
<h2 id="index-js"><a href="#index-js" class="headerlink" title="index.js"></a>index.js</h2><h3 id="这是父组件"><a href="#这是父组件" class="headerlink" title="这是父组件"></a>这是父组件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div></pre></td><td class="code"><pre><div class="line">module.exports = &#123;</div><div class="line">    path: &apos;tinymce&apos;,</div><div class="line">breadcrumbName:&quot;redux测试&quot;,</div><div class="line"></div><div class="line">getComponent(nextState, callback) &#123;</div><div class="line">        require.ensure([], (require) =&gt; &#123;</div><div class="line">            callback(null, require(&apos;./components/circle.jsx&apos;))</div><div class="line">        &#125;)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">circle.jsx</div><div class="line">import React,&#123;Component&#125; from &apos;react&apos;;</div><div class="line">import ReactDom from &apos;react-dom&apos;;</div><div class="line">import Newout from &apos;./NewOUtSide.js&apos;</div><div class="line">class test extends Component&#123;</div><div class="line">constructor(props)&#123;</div><div class="line">//构造方法</div><div class="line">super(props);</div><div class="line">this.state=&#123;</div><div class="line">dataname:&apos;属性了，一个基本的属性&apos;,</div><div class="line">newtestname:&apos;&apos;,</div><div class="line">newreftest:&apos;&apos;,</div><div class="line">isTrue:&apos;你去给我买好吃的去&apos;,</div><div class="line">isout:&apos;我是外面的&apos;</div><div class="line">&#125;</div><div class="line">//点击事件</div><div class="line">this.onSubmit=this.onSubmit.bind(this);</div><div class="line">//实时传递数据</div><div class="line">this.newtest=this.newtest.bind(this);</div><div class="line">//实时传递数据</div><div class="line">this.reftest=this.reftest.bind(this);</div><div class="line">//组件之间传值</div><div class="line">this.newContent=this.newContent.bind(this);</div><div class="line">//这是外面传值</div><div class="line">this.outContent=this.outContent.bind(this);</div><div class="line">&#125;;</div><div class="line">//加载就执行</div><div class="line">componentDidMount()&#123;</div><div class="line">this.setState(&#123;</div><div class="line">name:&apos;我是加载就执行的name，我是react一个方法&apos;</div><div class="line">&#125;)</div><div class="line">  &#125;</div><div class="line">//点击事件</div><div class="line">onSubmit()&#123;</div><div class="line"></div><div class="line">this.setState(&#123;</div><div class="line">dataname:&apos;我是修改之后的属性&apos;</div><div class="line">&#125;)</div><div class="line">  &#125;</div><div class="line">//修改input</div><div class="line">newtest(value)&#123;</div><div class="line"></div><div class="line">this.setState(&#123;</div><div class="line">newtestname:value.target.value</div><div class="line">    &#125;)</div><div class="line"></div><div class="line">  &#125;</div><div class="line">//修改input的内容</div><div class="line">reftest(value)&#123;</div><div class="line">this.state.newreftest=ReactDom.findDOMNode(this.refs.inputname).value;</div><div class="line">this.forceUpdate();</div><div class="line"></div><div class="line">&#125;</div><div class="line">//修改组件的值</div><div class="line">newContent(value)&#123;</div><div class="line">this.setState(&#123;</div><div class="line">iszi:value</div><div class="line">    &#125;)</div><div class="line"></div><div class="line">  &#125;</div><div class="line">//外面传递的值</div><div class="line">outContent(value)&#123;</div><div class="line">this.setState(&#123;</div><div class="line">isoutzi:value</div><div class="line">    &#125;)</div><div class="line">  &#125;</div><div class="line">render()&#123;</div><div class="line">return (</div><div class="line">&lt;div&gt;</div><div class="line">这是个测试:</div><div class="line">        &#123;this.state.dataname&#125;，</div><div class="line">&lt;h4&gt;这是一个componentDidMount的方法：&lt;/h4&gt;&#123;this.state.name&#125;</div><div class="line">&lt;h3&gt;这是一个按钮：&lt;/h3&gt;</div><div class="line">            &lt;button type=&quot;primary&quot; htmlType=&quot;submit&quot; ref=&quot;submit&quot; onClick=&#123;this.onSubmit&#125;&gt;点击&lt;/button&gt;</div><div class="line">            &lt;h3&gt;实时传值&lt;/h3&gt;</div><div class="line">            &lt;input type=&quot;test&quot; onChange=&#123;this.newtest&#125; /&gt;</div><div class="line">            &lt;span&gt;&#123;this.state.newtestname&#125;&lt;/span&gt;</div><div class="line">              &lt;input type=&quot;test&quot; ref=&quot;inputname&quot; onChange=&#123;this.reftest&#125; /&gt;</div><div class="line">            &lt;span style=&#123;&#123;color:&apos;red&apos;&#125;&#125;&gt;&#123;this.state.newreftest&#125;&lt;/span&gt;</div><div class="line">            &lt;span&gt;这是同页面之间传值：&lt;/span&gt;</div><div class="line">              &lt;NewModuleTest isAll=&#123;this.state.isTrue&#125; cdContent=&#123;this.newContent&#125; /&gt;</div><div class="line">              &lt;h5&gt;这是子组件给我传递的值：&#123;this.state.iszi&#125;&lt;/h5&gt;</div><div class="line">            &lt;span&gt;这是从外面传值&lt;/span&gt;</div><div class="line">            &lt;Newout isOutAll=&#123;this.state.isout&#125; isOutContet=&#123;this.outContent&#125; /&gt;</div><div class="line">            &lt;span&gt;这是外面给传递的值：&#123;this.state.isoutzi&#125;&lt;/span&gt;</div><div class="line">      &lt;/div&gt;</div><div class="line">)</div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="这是子组件"><a href="#这是子组件" class="headerlink" title="这是子组件"></a>这是子组件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">class NewModuleTest extends Component&#123;</div><div class="line">constructor(props)&#123;</div><div class="line">super(props);</div><div class="line">this.state=&#123;</div><div class="line">isnew:&apos;&apos;,</div><div class="line">isdata:&apos;我没有钱，没法给你买东西&apos;</div><div class="line">&#125;</div><div class="line"></div><div class="line">   &#125;</div><div class="line">componentDidMount()&#123;</div><div class="line">this.setState(&#123;</div><div class="line">isnew:this.props.isAll</div><div class="line">&#125;);</div><div class="line">setTimeout(()=&gt;&#123;</div><div class="line">this.props.cdContent(this.state.isdata)</div><div class="line">    &#125;,100)</div><div class="line"></div><div class="line">   &#125;</div><div class="line">render()&#123;</div><div class="line">return (</div><div class="line">&lt;div&gt;</div><div class="line">            &lt;h1&gt;我是子组件，我在同一个页中实现的，我要给父组件传值&lt;/h1&gt;</div><div class="line">            &lt;h3&gt;我是父组件传给我值：&#123;this.state.isnew&#125;&lt;/h3&gt;</div><div class="line"></div><div class="line">       &lt;/div&gt;</div><div class="line">)</div><div class="line">   &#125;</div><div class="line"></div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<h3 id="这是模块之前的传值方式"><a href="#这是模块之前的传值方式" class="headerlink" title="这是模块之前的传值方式"></a>这是模块之前的传值方式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">//模块输出</div><div class="line">module.exports=test;</div><div class="line">NewOUtSide.js</div><div class="line">import React,&#123;Component&#125; from &apos;react&apos;;</div><div class="line">import ReactDom from &apos;react-dom&apos;;</div><div class="line"></div><div class="line">class OutSide extends Component&#123;</div><div class="line">constructor(props)&#123;</div><div class="line">super(props);</div><div class="line">this.state=&#123;</div><div class="line">isout:&apos;&apos;,</div><div class="line">outlist:&quot;我是外面给父组件传递值&quot;</div><div class="line">&#125;</div><div class="line">  &#125;</div><div class="line">componentDidMount()&#123;</div><div class="line">this.setState(&#123;</div><div class="line">isout:this.props.isOutAll</div><div class="line">&#125;);</div><div class="line">setTimeout(()=&gt;&#123;this.props.isOutContet(this.state.outlist)&#125;,100)</div><div class="line"></div><div class="line"></div><div class="line">  &#125;</div><div class="line">render()&#123;</div><div class="line">return(</div><div class="line">&lt;div&gt;</div><div class="line">          &lt;h3&gt;这是外面的组件：&#123;this.state.isout&#125;&lt;/h3&gt;</div><div class="line">      &lt;/div&gt;</div><div class="line">)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">module.exports=OutSide;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[React.js  WebPack  Babel ES6 React-router Redux 项目搭建]]></title>
      <url>https://qingege.github.io/2016/07/21/react/react_creation/</url>
      <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">下面来详细介绍一下</div><div class="line"> React.js  WebPack  Babel ES6 React-router Redux 项目搭建</div></pre></td></tr></table></figure>
<h1 id="1-创建项目"><a href="#1-创建项目" class="headerlink" title="1 创建项目"></a>1 创建项目</h1><p>首先 搭建一个这样的结构</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">--your project</div><div class="line">  |--app</div><div class="line">    |--components</div><div class="line">      |--productBox.jsx</div><div class="line">    |--main.js</div><div class="line">  |--build</div><div class="line">    |--index.html</div><div class="line">    |--bundle.js(该文件是webpack打包后生成的)</div></pre></td></tr></table></figure>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">下面来详细介绍一下</div><div class="line"> React.js  WebPack  Babel ES6 React-router Redux 项目搭建</div></pre></td></tr></table></figure>
<h1 id="1-创建项目-1"><a href="#1-创建项目-1" class="headerlink" title="1 创建项目"></a>1 创建项目</h1><p>首先 搭建一个这样的结构</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">--your project</div><div class="line">  |--app</div><div class="line">    |--components</div><div class="line">      |--productBox.jsx</div><div class="line">    |--main.js</div><div class="line">  |--build</div><div class="line">    |--index.html</div><div class="line">    |--bundle.js(该文件是webpack打包后生成的)</div></pre></td></tr></table></figure>
<h3 id="（1）-创建package-json"><a href="#（1）-创建package-json" class="headerlink" title="（1） 创建package.json"></a>（1） 创建package.json</h3><pre><code>npm init    
帮助我们跟踪节点模块
</code></pre><h3 id="（2）-安装react和react-DOM"><a href="#（2）-安装react和react-DOM" class="headerlink" title="（2） 安装react和react DOM"></a>（2） 安装react和react DOM</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">npm install react --save-dev</div><div class="line">或者是 npm install --save-dev react@5.10.0</div><div class="line">npm install react-dom --save-dev</div></pre></td></tr></table></figure>
<h3 id="3-安装webpack和webpack-dev-server"><a href="#3-安装webpack和webpack-dev-server" class="headerlink" title="(3) 安装webpack和webpack-dev-server"></a>(3) 安装webpack和webpack-dev-server</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">需要注意的是 webpack-dev-server 为服务器需要装全局的</div><div class="line">npm install webpack --save-dev</div><div class="line">npm install webpack-dev-server -g</div></pre></td></tr></table></figure>
<h3 id="（4）安装babel-loader-和下面几个组件"><a href="#（4）安装babel-loader-和下面几个组件" class="headerlink" title="（4）安装babel-loader 和下面几个组件"></a>（4）安装babel-loader 和下面几个组件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">npm install babel-loader --save-dev</div><div class="line">npm install babel-core --save-dev</div><div class="line">npm install babel-preset-es2015 --save-dev //支持ES2015</div><div class="line">npm install babel-preset-react --save-dev //支持jsx</div></pre></td></tr></table></figure>
<h4 id="5-在文件夹app下创建hello-jsx"><a href="#5-在文件夹app下创建hello-jsx" class="headerlink" title="(5) 在文件夹app下创建hello.jsx"></a>(5) 在文件夹app下创建hello.jsx</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">首先创建自己的第一组件，当你创建一个组件，您定义所有这些通过重写的反应，组件来呈现功能</div><div class="line">在hello.jsx中输入：</div><div class="line">import React from &apos;react&apos;;</div><div class="line">class Hello extends React.Component&#123;</div><div class="line">    render()&#123;</div><div class="line">    return &lt;h1&gt;你好&lt;/h1&gt;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">需要注意的是：我们运用的是ES6语法，可以使我们的代码不用写React.createClass更加简洁。</div><div class="line">下面的代码是不用ES6和JSX的代码</div><div class="line">var React =require(&apos;react&apos;);</div><div class="line">var Hello =React.createClass(&#123;</div><div class="line">    displayName:&apos;Hello&apos;,</div><div class="line">    render:function()&#123;</div><div class="line">    return React.createElement(&quot;h1&quot;,null,&quot;Hello&quot;);</div><div class="line">&#125;</div><div class="line">&#125;);</div><div class="line">当我们使用JSX时,我们可以更简练地定义虚拟DOM元素,而无需调用反应。createElement和通过哪些属性的元素。我们简单的你好组件可能有相同数量的行代码但JSX使事情更容易,继续构建组件和结合在一起。所以我们不用这种方式了</div></pre></td></tr></table></figure>
<h3 id="（6）引入DOM的渲染功能，传递一个组件对象来连接一个实际的DOM元素"><a href="#（6）引入DOM的渲染功能，传递一个组件对象来连接一个实际的DOM元素" class="headerlink" title="（6）引入DOM的渲染功能，传递一个组件对象来连接一个实际的DOM元素"></a>（6）引入DOM的渲染功能，传递一个组件对象来连接一个实际的DOM元素</h3> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">import React from &apos;react&apos;;</div><div class="line">import ReactDOM from &apos;react-dom&apos;;</div><div class="line">   class Hello extends React.Component&#123;</div><div class="line">    render()&#123;</div><div class="line">    return &lt;h1&gt;你好&lt;/h1&gt;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">ReactDOM.render(&lt;Hello/&gt;,document.getElementById(&apos;hello&apos;));</div></pre></td></tr></table></figure>
<h3 id="（7）同样的方式早app文件夹下添加world-jsx组件"><a href="#（7）同样的方式早app文件夹下添加world-jsx组件" class="headerlink" title="（7）同样的方式早app文件夹下添加world.jsx组件"></a>（7）同样的方式早app文件夹下添加world.jsx组件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">import React from &apos;react&apos;;</div><div class="line">import ReactDOM from &apos;react-dom&apos;;</div><div class="line"> </div><div class="line">class World extends React.Component &#123;</div><div class="line">  render() &#123;</div><div class="line">    return &lt;h1&gt;World&lt;/h1&gt;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line">ReactDOM.render(&lt;World/&gt;, document.getElementById(&apos;world&apos;));</div><div class="line">//调用html中的id=&quot;world&quot;。对应的是World组件</div></pre></td></tr></table></figure>
<h3 id="（8）在build-文件夹下的index-html中添加如下代码"><a href="#（8）在build-文件夹下的index-html中添加如下代码" class="headerlink" title="（8）在build 文件夹下的index.html中添加如下代码:"></a>（8）在build 文件夹下的index.html中添加如下代码:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;!doctype html&gt;</div><div class="line">&lt;html&gt;</div><div class="line"> &lt;head&gt;</div><div class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class="line">  &lt;title&gt;Hello React&lt;/title&gt;</div><div class="line"> &lt;/head&gt;</div><div class="line"> &lt;body&gt;</div><div class="line">  &lt;div id=&quot;hello&quot;&gt;&lt;/div&gt;</div><div class="line">  &lt;div id=&quot;world&quot;&gt;&lt;/div&gt;</div><div class="line"> &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<h3 id="9-在app文件夹下的main-js添加如下代码"><a href="#9-在app文件夹下的main-js添加如下代码" class="headerlink" title="(9) 在app文件夹下的main.js添加如下代码"></a>(9) 在app文件夹下的main.js添加如下代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">作用是：导入这两个反应组件。</div><div class="line">import Hello from&apos;./hello.jsx&apos;;</div><div class="line">import World from&apos;./world.jsx&apos;;</div></pre></td></tr></table></figure>
<h3 id="（10）我们需要告诉Webpack-这将是我们的入口点和加载器使用在创建包。"><a href="#（10）我们需要告诉Webpack-这将是我们的入口点和加载器使用在创建包。" class="headerlink" title="（10）我们需要告诉Webpack,这将是我们的入口点和加载器使用在创建包。"></a>（10）我们需要告诉Webpack,这将是我们的入口点和加载器使用在创建包。</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">在项目目录下创建webpack.config.js</div><div class="line">varpath=require(&apos;path&apos;);</div><div class="line">varwebpack=require(&apos;webpack&apos;);</div><div class="line"> </div><div class="line">module.exports=&#123;</div><div class="line"> entry:path.resolve(__dirname, &apos;./app/main.js&apos;),</div><div class="line"> output:&#123; </div><div class="line">     path:path.resolve(__dirname, &apos;./build&apos;),</div><div class="line">filename:&apos;bundle.js&apos;&#125;,</div><div class="line"> module:&#123;</div><div class="line">   loaders:[</div><div class="line">      &#123;</div><div class="line">        test:/.jsx?$/,// 用正则来匹配文件路径，这段意思是匹配 js 或者 jsx</div><div class="line">        loader:&apos;babel-loader&apos;,</div><div class="line">        exclude:/node_modules/,</div><div class="line">        query:&#123;</div><div class="line">          presets:[&apos;es2015&apos;,&apos;react&apos;]</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    ]</div><div class="line"> &#125;,</div><div class="line">&#125;;</div><div class="line">其中entry指定了webpack的入口程序，好比c++和java中的main程序一样，我们把最终要插入到页面指定位置的react模板写入main.js中。</div><div class="line"></div><div class="line">而output则指定了webpack打包成功之后文件名称以及文件的存放位置。</div></pre></td></tr></table></figure>
<h3 id="（11）我们需要在html中添加bundle-js-依照之前指定的项目结构，我们可以在index-html中直接引入打包生成的bundle-js"><a href="#（11）我们需要在html中添加bundle-js-依照之前指定的项目结构，我们可以在index-html中直接引入打包生成的bundle-js" class="headerlink" title="（11）我们需要在html中添加bundle.js.依照之前指定的项目结构，我们可以在index.html中直接引入打包生成的bundle.js"></a>（11）我们需要在html中添加bundle.js.依照之前指定的项目结构，我们可以在index.html中直接引入打包生成的bundle.js</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;!doctype html&gt;</div><div class="line">&lt;html&gt;</div><div class="line"> &lt;head&gt;</div><div class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class="line">  &lt;title&gt;Hello React&lt;/title&gt;</div><div class="line"> &lt;/head&gt;</div><div class="line"> &lt;body&gt;</div><div class="line">  &lt;div id=&quot;hello&quot;&gt;&lt;/div&gt;</div><div class="line">  &lt;div id=&quot;world&quot;&gt;&lt;/div&gt;</div><div class="line">  &lt;script src=&quot;bundle.js&quot;&gt;&lt;/script&gt;</div><div class="line"> &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<h3 id="（12）使用webpack-dev-server：监听代码自动刷新！"><a href="#（12）使用webpack-dev-server：监听代码自动刷新！" class="headerlink" title="（12）使用webpack-dev-server：监听代码自动刷新！"></a>（12）使用webpack-dev-server：监听代码自动刷新！</h3><h4 id="（12-1、在控制台上输入"><a href="#（12-1、在控制台上输入" class="headerlink" title="（12.1、在控制台上输入"></a>（12.1、在控制台上输入</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">npm install webpack-dev-server --save-dev </div><div class="line">npm install --save-dev react-hot-loader //热加载</div><div class="line"></div><div class="line">我们先打开package.json，并找到scripts代码块。在没引入webpack-dev-server之前，我们运行这个项目的姿势是这样的</div><div class="line">&quot;scripts&quot;: &#123;</div><div class="line">        &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;,</div><div class="line">        &quot;build&quot;: &quot;webpack&quot;</div><div class="line">&#125;</div><div class="line">并且执行：</div><div class="line">npm run build</div></pre></td></tr></table></figure>
<h4 id="（12-2）项目就跑起来啦，但是每次修改程序我们都要手动输入npm-run-build来跑项目，这无疑是一件非常蛋疼的事情。但有了webpack-dev-server光环，我们的姿势应该是这样的："><a href="#（12-2）项目就跑起来啦，但是每次修改程序我们都要手动输入npm-run-build来跑项目，这无疑是一件非常蛋疼的事情。但有了webpack-dev-server光环，我们的姿势应该是这样的：" class="headerlink" title="（12.2）项目就跑起来啦，但是每次修改程序我们都要手动输入npm run build来跑项目，这无疑是一件非常蛋疼的事情。但有了webpack-dev-server光环，我们的姿势应该是这样的："></a>（12.2）项目就跑起来啦，但是每次修改程序我们都要手动输入npm run build来跑项目，这无疑是一件非常蛋疼的事情。但有了webpack-dev-server光环，我们的姿势应该是这样的：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">为scripts添加</div><div class="line">&quot;scripts&quot;: &#123;</div><div class="line"></div><div class="line">        &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;,</div><div class="line">        &quot;build&quot;: &quot;webpack&quot;,</div><div class="line">          &quot;dev&quot;: &quot;webpack-dev-server --devtool eval --progress --colors --hot --content-base build&quot;</div><div class="line">&#125;</div><div class="line">    ps：dev里各属性值的意思是：</div><div class="line">    1.  webpack-dev-server: 在 localhost:8080 建立一个 Web 服务器</div><div class="line">    2.  --devtool eval:为你的代码创建源地址。当有任何报错的时候可以让你更加精确地定位到文件和行号</div><div class="line">    3.  --progress: 显示合并代码进度</div><div class="line">    4.  --colors: 在命令行中显示颜色</div><div class="line">    5.  --content-base build:指向设置的输出目录</div></pre></td></tr></table></figure>
<h4 id="（12-3）并且在index-html里加入：build-index-html"><a href="#（12-3）并且在index-html里加入：build-index-html" class="headerlink" title="（12.3）并且在index.html里加入：build/index.html"></a>（12.3）并且在index.html里加入：build/index.html</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head lang=&quot;en&quot;&gt;</div><div class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class="line">&lt;title&gt;hello react&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;div id=&quot;hello&quot;&gt;&lt;/div&gt;</div><div class="line">&lt;div id=&quot;world&quot;&gt;&lt;/div&gt;</div><div class="line">&lt;script src=&quot;http://localhost:8080/webpack-dev-server.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;script src=&quot;bundle.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<h4 id="（12-4）在webpack-config-js的入口处加入："><a href="#（12-4）在webpack-config-js的入口处加入：" class="headerlink" title="（12.4）在webpack.config.js的入口处加入："></a>（12.4）在webpack.config.js的入口处加入：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">var path=require(&apos;path&apos;);</div><div class="line">var webpack =require(&apos;webpack&apos;);</div><div class="line">module.exports=&#123;</div><div class="line"> entry:[&apos;webpack/hot/dev-server&apos;,</div><div class="line">        &apos;webpack-dev-server/client?http://localhost:8080&apos;,</div><div class="line">        path.resolve(__dirname, &apos;./app/main.js&apos;)],</div><div class="line">output:&#123;</div><div class="line">path: path.resolve(__dirname, &apos;./build&apos;),</div><div class="line">filename:&apos;bundle.js&apos;</div><div class="line">&#125;,</div><div class="line">module:&#123;</div><div class="line">loaders:[&#123;</div><div class="line">test:/.jsx?$/,</div><div class="line">loader:&apos;babel-loader&apos;,</div><div class="line">exclude:/node_modules/,</div><div class="line">query:&#123;</div><div class="line">                presets:[&apos;es2015&apos;,&apos;react&apos;]</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        ]</div><div class="line">    &#125;,</div><div class="line">plugins: [</div><div class="line">new webpack.DefinePlugin(&#123;</div><div class="line">        &apos;process.env.NODE_ENV&apos;: &apos;&quot;development&quot;&apos;</div><div class="line">    &#125;),</div><div class="line">new webpack.HotModuleReplacementPlugin()</div><div class="line">]</div><div class="line">&#125;;</div><div class="line">最后执行：</div><div class="line">npm run dev</div><div class="line">在浏览器中打开localhost：8080</div><div class="line"></div><div class="line"></div><div class="line">修改端口为8090</div><div class="line">&quot;dev&quot;: &quot;webpack-dev-server --devtool eval --port 8090 --progress --colors --hot --content-base build&quot;</div><div class="line">开发环境</div><div class="line">&quot;compile&quot;: &quot;webpack -p --progress --colors --config webpack.production.config.js&quot;,</div></pre></td></tr></table></figure>
<p>添加本文件，开发js<br><img src="http://o6znw17tt.bkt.clouddn.com/clipboard.png" alt="image"></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div></pre></td><td class="code"><pre><div class="line">var path=require(&apos;path&apos;);</div><div class="line">var webpack =require(&apos;webpack&apos;);</div><div class="line">var CommonsChunkPlugin = require(&quot;webpack/lib/optimize/CommonsChunkPlugin&quot;);</div><div class="line">module.exports=&#123;</div><div class="line">resolve:&#123;</div><div class="line">root:[</div><div class="line">path.resolve(&apos;./app/_global/components&apos;)</div><div class="line">        ],</div><div class="line">extensions:[&apos;&apos;,&apos;.js&apos;,&apos;.jsx&apos;]</div><div class="line">    &#125;,</div><div class="line">entry:[</div><div class="line">path.resolve(__dirname, &apos;./app/main.js&apos;)</div><div class="line">    ],</div><div class="line">output:&#123;</div><div class="line">path: __dirname + &apos;/build&apos;,</div><div class="line">filename: &apos;bundle.js&apos;,</div><div class="line">chunkFilename: &apos;[id].chunk.js&apos;</div><div class="line">&#125;,</div><div class="line">module:&#123;</div><div class="line">loaders:[&#123;</div><div class="line">test:/.jsx?$/,</div><div class="line">loader:&apos;babel-loader&apos;,</div><div class="line">exclude:/node_modules/,</div><div class="line">query:&#123;</div><div class="line">presets:[&apos;es2015&apos;,&apos;react&apos;]</div><div class="line">            &#125;</div><div class="line">        &#125;,</div><div class="line">&#123;test: /\.css$/, loader: &apos;style!css&apos;&#125;,</div><div class="line">&#123;test: /\.scss$/, loader: &quot;style!css!sass&quot;&#125;,</div><div class="line">&#123;test: /\.less$/,loader: &apos;style!css!less&apos;&#125;,</div><div class="line">&#123;test: /\.(png|jpg)$/, loader: &apos;url?limit=25000&apos;&#125;</div><div class="line"></div><div class="line"></div><div class="line">        ]</div><div class="line">    &#125;,</div><div class="line">plugins: [</div><div class="line">new webpack.DefinePlugin(&#123;</div><div class="line">&apos;process.env.NODE_ENV&apos;: &apos;&quot;development&quot;&apos;</div><div class="line">&#125;),</div><div class="line">new webpack.HotModuleReplacementPlugin()</div><div class="line">    ]</div><div class="line">&#125;;</div><div class="line"></div><div class="line">开发环境发布时执行命令 npm run compile</div><div class="line">然后将build里面的东西放在服务器上</div><div class="line"></div><div class="line">package.json</div><div class="line">&#123;</div><div class="line">&quot;name&quot;: &quot;pack_react3&quot;,</div><div class="line">&quot;version&quot;: &quot;1.0.0&quot;,</div><div class="line">&quot;description&quot;: &quot;&quot;,</div><div class="line">&quot;main&quot;: &quot;index.js&quot;,</div><div class="line">&quot;scripts&quot;: &#123;</div><div class="line">&quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;,</div><div class="line">&quot;build&quot;: &quot;webpack&quot;,</div><div class="line">&quot;compile&quot;: &quot;webpack -p --progress --colors --config webpack.production.config.js&quot;,</div><div class="line">&quot;dev&quot;: &quot;webpack-dev-server --devtool eval --port 8090 --progress --colors --hot --content-base build&quot;</div><div class="line">&#125;,</div><div class="line">&quot;author&quot;: &quot;&quot;,</div><div class="line">&quot;license&quot;: &quot;ISC&quot;,</div><div class="line">&quot;devDependencies&quot;: &#123;</div><div class="line">&quot;babel-core&quot;: &quot;^6.7.4&quot;,</div><div class="line">&quot;babel-loader&quot;: &quot;^6.2.4&quot;,</div><div class="line">&quot;babel-preset-es2015&quot;: &quot;^6.6.0&quot;,</div><div class="line">&quot;babel-preset-react&quot;: &quot;^6.5.0&quot;,</div><div class="line">&quot;css-loader&quot;: &quot;^0.23.1&quot;,</div><div class="line">&quot;file-loader&quot;: &quot;^0.8.5&quot;,</div><div class="line">&quot;less&quot;: &quot;^2.6.1&quot;,</div><div class="line">&quot;less-loader&quot;: &quot;^2.2.3&quot;,</div><div class="line">&quot;react&quot;: &quot;^0.14.8&quot;,</div><div class="line">&quot;react-dom&quot;: &quot;^0.14.8&quot;,</div><div class="line">&quot;react-hot-loader&quot;: &quot;^1.3.0&quot;,</div><div class="line">&quot;reqwest&quot;: &quot;^2.0.5&quot;,</div><div class="line">&quot;style-loader&quot;: &quot;^0.13.1&quot;,</div><div class="line">&quot;url-loader&quot;: &quot;^0.5.7&quot;,</div><div class="line">&quot;webpack&quot;: &quot;^1.12.14&quot;,</div><div class="line">&quot;webpack-dev-server&quot;: &quot;^1.14.1&quot;</div><div class="line">&#125;,</div><div class="line">&quot;dependencies&quot;: &#123;</div><div class="line">&quot;antd&quot;: &quot;^0.12.13&quot;,</div><div class="line">&quot;babel-preset-react&quot;: &quot;^6.5.0&quot;,</div><div class="line">&quot;rc-select&quot;: &quot;^6.0.6&quot;,</div><div class="line">&quot;react&quot;: &quot;^0.14.8&quot;,</div><div class="line">&quot;react-dom&quot;: &quot;^0.14.8&quot;,</div><div class="line">&quot;react-router&quot;: &quot;^2.2.2&quot;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="webpack-config-js"><a href="#webpack-config-js" class="headerlink" title="webpack.config.js"></a>webpack.config.js</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">var path=require(&apos;path&apos;);</div><div class="line">var webpack =require(&apos;webpack&apos;);</div><div class="line"></div><div class="line">module.exports=&#123;</div><div class="line">resolve:&#123;</div><div class="line">root:[</div><div class="line">            path.resolve(&apos;./app/_global/components&apos;)</div><div class="line">        ],</div><div class="line">extensions:[&apos;&apos;,&apos;.js&apos;,&apos;.jsx&apos;]</div><div class="line">    &#125;,</div><div class="line">entry:[&apos;webpack/hot/dev-server&apos;,</div><div class="line">&apos;webpack-dev-server/client?http://localhost:8090&apos;,</div><div class="line">path.resolve(__dirname, &apos;./app/main.js&apos;)],</div><div class="line">output:&#123;</div><div class="line">//path: path.resolve(__dirname, &apos;build/bundles&apos;),</div><div class="line">        //filename:&apos;bundle.js&apos;</div><div class="line">path: __dirname + &apos;/build&apos;,</div><div class="line">filename: &apos;bundle.js&apos;,</div><div class="line">chunkFilename: &apos;[id].chunk.js&apos;</div><div class="line">&#125;,</div><div class="line">module:&#123;</div><div class="line">loaders:[&#123;</div><div class="line">test:/.jsx?$/,</div><div class="line">loader:&apos;babel-loader&apos;,</div><div class="line">exclude:/node_modules/,</div><div class="line">query:&#123;</div><div class="line">presets:[&apos;es2015&apos;,&apos;react&apos;]</div><div class="line">            &#125;</div><div class="line">        &#125;,</div><div class="line">&#123;test: /\.css$/, loader: &apos;style!css&apos;&#125;,</div><div class="line">&#123;test: /\.scss$/, loader: &quot;style!css!sass&quot;&#125;,</div><div class="line">&#123;test: /\.less$/,loader: &apos;style!css!less&apos;&#125;,</div><div class="line">&#123;test: /\.(png|jpg)$/, loader: &apos;url?limit=25000&apos;&#125;</div><div class="line"></div><div class="line"></div><div class="line">        ]</div><div class="line">    &#125;,</div><div class="line">plugins: [</div><div class="line">new webpack.DefinePlugin(&#123;</div><div class="line">&apos;process.env.NODE_ENV&apos;: &apos;&quot;development&quot;&apos;</div><div class="line">&#125;),</div><div class="line">new webpack.HotModuleReplacementPlugin()</div><div class="line">]</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="创建路由"><a href="#创建路由" class="headerlink" title="创建路由"></a>创建路由</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">在webpack.config.js中输入</div><div class="line">resolve:&#123;</div><div class="line">root:[</div><div class="line">        path.resolve(&apos;./app/_global/components&apos;) //这个是根目录，进来之后先去找这个</div><div class="line">    ],</div><div class="line">extensions:[&apos;&apos;,&apos;.js&apos;,&apos;.jsx&apos;]//拓展，以后带有&apos;&apos;,&apos;.js&apos;,&apos;.jsx&apos;可以省略不写，如：dome.js 可以写成dome</div><div class="line">&#125;,</div><div class="line">在目录下面创建下面的地址</div><div class="line"></div><div class="line">在customComponents.js中调用写的默认模板</div><div class="line">import React from &apos;react&apos;;</div><div class="line">require(&apos;customComponents/customComponents.css&apos;) ;//引用customConponents文件中的css样式，其实这里省略了root中的./app/_global/components</div><div class="line">import NavBox from &apos;customComponents/NavBox.js&apos;//定义默认模块</div><div class="line">module.exports=&#123;NavBox&#125;//模块输出，输出默认模块</div></pre></td></tr></table></figure>
<h2 id="路由搭建逻辑："><a href="#路由搭建逻辑：" class="headerlink" title="路由搭建逻辑："></a>路由搭建逻辑：</h2><h3 id="1-首先创建子路由"><a href="#1-首先创建子路由" class="headerlink" title="1 首先创建子路由"></a>1 首先创建子路由</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">import React from &apos;react&apos;;</div><div class="line">import &#123; render &#125; from &apos;react-dom&apos;</div><div class="line">import &#123; Router, Route, hashHistory, IndexRoute,Link &#125; from &apos;react-router&apos;;</div><div class="line">import Home from &apos;./modules/_public/Home&apos;;</div><div class="line">import Dashboard from &apos;./modules/_public/Dashboard&apos;;</div><div class="line">import NotFound from &apos;./modules/_public/NotFound&apos;;</div><div class="line">const routerConfig = [</div><div class="line">    &#123;</div><div class="line">path: &apos;/&apos;,</div><div class="line">component: Dashboard, //默认面板</div><div class="line">indexRoute: &#123; component: Home &#125;,//当刚开始进入，什么路由也没有的时候加载</div><div class="line">breadcrumbName:&apos;首页&apos;,</div><div class="line">childRoutes: [</div><div class="line">require(&apos;./modules/circle&apos;)//子路由地址</div><div class="line">]</div><div class="line">    &#125;,</div><div class="line">&#123;</div><div class="line">path: &apos;*&apos;,</div><div class="line">component: Dashboard,</div><div class="line">indexRoute:&#123;component:NotFound&#125;//当什么路由地址没有的时候加载</div><div class="line">&#125;</div><div class="line">];</div><div class="line">render((</div><div class="line">&lt;Router  history=&#123;hashHistory&#125; routes=&#123;routerConfig&#125; /&gt;</div><div class="line">), document.getElementById(&apos;app&apos;));</div><div class="line">上面的Home Dashboard NotFound 分别对应下面的三个模块</div></pre></td></tr></table></figure>
<h3 id="2-子路由地址"><a href="#2-子路由地址" class="headerlink" title="2 子路由地址"></a>2 子路由地址</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div></pre></td><td class="code"><pre><div class="line">require(&apos;./modules/circle&apos;)//子路由地址</div><div class="line">从这个地址进入子路由</div><div class="line"></div><div class="line">进入这个子路由 ，先执行getChildRoutes 然后执行 getComponent这个</div><div class="line">getChildRoutes  这个是子路由地址</div><div class="line">getComponent    这个是 面板地址 就是本页加载的地方</div><div class="line"></div><div class="line">module.exports=&#123;</div><div class="line">path:&apos;circle&apos;,</div><div class="line">breadcrumbName:&quot;圈子&quot;,</div><div class="line">getChildRoutes(location,callback)&#123;</div><div class="line">require.ensure([],(require)=&gt;&#123;</div><div class="line">            callback(null,[</div><div class="line">                require(&apos;./routes/items&apos;)//这个子路由</div><div class="line">])</div><div class="line">        &#125;);</div><div class="line">&#125;,</div><div class="line">getComponent(nextState,callback)&#123;</div><div class="line">require.ensure([],(require)=&gt;&#123;</div><div class="line"></div><div class="line">            callback(null,require(&apos;./components/circle.jsx&apos;))//这个是跳转的面板</div><div class="line">&#125;)</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">走到这里，先进入这个页面的circle.jsx中</div><div class="line"></div><div class="line">这是circle.jsx</div><div class="line">当点击圈子的时候 进入子路由的index.js</div><div class="line"></div><div class="line">module.exports=&#123;</div><div class="line">path:&apos;items&apos;,</div><div class="line">getChildRoutes(location,callback)&#123;</div><div class="line">require.ensure([],(require)=&gt;&#123;</div><div class="line">           callback(null,[</div><div class="line">               require(&apos;./routes/item&apos;)</div><div class="line">           ])</div><div class="line">        &#125;);</div><div class="line">&#125;,</div><div class="line">getComponents(nextSate,callback)&#123;</div><div class="line">require.ensure([],(require)=&gt;&#123;</div><div class="line">            callback(null,&#123;</div><div class="line">header:require(&apos;./components/header.jsx&apos;),</div><div class="line">main:require(&apos;./components/items.jsx&apos;),</div><div class="line">footer:require(&apos;./components/footer.jsx&apos;)</div><div class="line">            &#125;);</div><div class="line">&#125;);</div><div class="line">&#125;</div><div class="line">&#125;;</div><div class="line">传递 header main footer 三个面板给circle.jsx</div><div class="line">import React,&#123;Component&#125; from &apos;react&apos;;</div><div class="line">import ReactDOM from &apos;react-dom&apos;;</div><div class="line">import Dashboard from &apos;./dashboard.jsx&apos;;</div><div class="line">import &#123;Affix&#125; from &apos;antd&apos;;</div><div class="line"></div><div class="line">class Circle extends Component&#123;</div><div class="line">render() &#123;</div><div class="line">        console.log(&quot;adsfa this.props: &quot;, this.props);</div><div class="line">let &#123; header, main, footer, children, params &#125; = this.props,content;</div><div class="line">console.log(&quot;这是header&quot;,header);</div><div class="line">if (header || main || footer) &#123;</div><div class="line">            content = (</div><div class="line">&lt;div className=&quot;content_group&quot;&gt;</div><div class="line">&#123;(!!header) ? (&lt;Affix offset=&#123;20&#125;&gt;&lt;div className=&quot;content_header&quot;&gt;&#123;header&#125;&lt;/div&gt;&lt;/Affix&gt;) : &quot;&quot;&#125;</div><div class="line">                    &#123;(!!main) ? (&lt;div className=&quot;content_main&quot;&gt;&#123;main&#125;&lt;/div&gt;) : &quot;&quot;&#125;</div><div class="line">                    &#123;(!!footer) ? (&lt;div className=&quot;content_footer&quot;&gt;&#123;footer&#125;&lt;/div&gt;) : &quot;&quot;&#125;</div><div class="line">&lt;/div&gt;</div><div class="line">)</div><div class="line">        &#125; else if (children) &#123;</div><div class="line">            content = children</div><div class="line">&#125; else &#123;</div><div class="line">            content = &lt;Dashboard /&gt;</div><div class="line">&#125;</div><div class="line"></div><div class="line">return (</div><div class="line">&lt;div&gt;</div><div class="line">&#123;content&#125;</div><div class="line">&lt;/div&gt;</div><div class="line">)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">module.exports=Circle;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div></pre></td><td class="code"><pre><div class="line">在某一个路由中需要执行</div><div class="line"></div><div class="line">首先执行第一个index.js,这是index.jsx内容</div><div class="line">module.exports=&#123;</div><div class="line">path:&apos;items&apos;,</div><div class="line">getChildRoutes(location,callback)&#123;</div><div class="line">require.ensure([],(require)=&gt;&#123;</div><div class="line">           callback(null,[</div><div class="line">               require(&apos;./routes/item&apos;)</div><div class="line">           ])</div><div class="line">        &#125;);</div><div class="line">&#125;,</div><div class="line">getComponents(nextSate,callback)&#123;</div><div class="line">require.ensure([],(require)=&gt;&#123;</div><div class="line">            callback(null,&#123;</div><div class="line">header:require(&apos;./components/header.jsx&apos;),</div><div class="line">main:require(&apos;./components/items.jsx&apos;),</div><div class="line">footer:require(&apos;./components/footer.jsx&apos;)</div><div class="line">            &#125;);</div><div class="line">&#125;);</div><div class="line">&#125;</div><div class="line">&#125;;</div><div class="line">然后又会从mian.js中开始加载（每一次执行一个路由都会从头开始加载），加载到circle.jsx,这是circle</div><div class="line">import React, &#123; Component &#125; from &apos;react&apos;</div><div class="line">import Dashboard from &apos;./dashboard.jsx&apos;</div><div class="line">import &#123; Affix &#125; from &apos;antd&apos;;</div><div class="line"></div><div class="line">class Circle extends Component &#123;</div><div class="line">render() &#123;</div><div class="line">let &#123; header, main, footer, children, params &#125; = this.props, content</div><div class="line">if (header || main || footer) &#123;</div><div class="line">            content = (</div><div class="line">&lt;div className=&quot;content_group&quot;&gt;</div><div class="line">&#123;(!!header) ? (&lt;Affix offset=&#123;20&#125;&gt;&lt;div className=&quot;content_header&quot;&gt;&#123;header&#125;&lt;/div&gt;&lt;/Affix&gt;) : &quot;&quot;&#125;</div><div class="line">                    &#123;(!!main) ? (&lt;div className=&quot;content_main&quot;&gt;&#123;main&#125;&lt;/div&gt;) : &quot;&quot;&#125;</div><div class="line">                    &#123;(!!footer) ? (&lt;div className=&quot;content_footer&quot;&gt;&#123;footer&#125;&lt;/div&gt;) : &quot;&quot;&#125;</div><div class="line">&lt;/div&gt;</div><div class="line">)</div><div class="line">        &#125; else if (children) &#123;</div><div class="line">            content = children</div><div class="line">&#125; else &#123;</div><div class="line">            content = &lt;Dashboard /&gt;</div><div class="line">&#125;</div><div class="line"></div><div class="line">return (</div><div class="line">&lt;div&gt;</div><div class="line">&#123;content&#125;</div><div class="line">&lt;/div&gt;</div><div class="line">)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">在本页面中加载header main footer数据，并调用了3中的items.js中的数据。这是items.jsx</div><div class="line">class CircleItems extends Component &#123;</div><div class="line">render() &#123;</div><div class="line">return (</div><div class="line">&lt;div&gt;</div><div class="line">&#123;</div><div class="line">this.props.children</div><div class="line">||</div><div class="line">&lt;Table columns=&#123;columns&#125; dataSource=&#123;data&#125;</div><div class="line">expandedRowRender=&#123;record =&gt; &lt;p&gt;&#123;record.description&#125;&lt;/p&gt;&#125;/&gt;</div><div class="line">&#125;</div><div class="line">&lt;/div&gt;</div><div class="line">)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">module.exports = CircleItems;</div><div class="line">这里有一个或（||）的判断，如果this.props.children为true时，下面的就不执行了，如果为false的时候，就会执行下面的table</div><div class="line">因为没有执行子路由，这里的this.props.children为false，执行下面的table</div><div class="line">然后就会给circle.jsx传递数据，加载出来下面的页面</div><div class="line"></div><div class="line"></div><div class="line">当点击详细信息的时候就会执行4步的index.js</div><div class="line">module.exports = &#123;</div><div class="line">path: &apos;id/:circleID&apos;,</div><div class="line">breadcrumbName:&quot;项目 :circleID&quot;,</div><div class="line">getComponent(nextState, callback) &#123;</div><div class="line">require.ensure([], (require) =&gt; &#123;</div><div class="line">            callback(null, require(&apos;./components/item&apos;))</div><div class="line">        &#125;)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">这里执行了1中index.js的子路由</div><div class="line">就会触发items.jsx中的this.props.children为true，然后就会走子路由。然后走4步的index.js</div><div class="line">跳到item.jsx中</div><div class="line">import React, &#123; Component &#125; from &apos;react&apos;</div><div class="line"></div><div class="line">class circleItem extends Component &#123;</div><div class="line">render() &#123;</div><div class="line">let properties = this.props;</div><div class="line">return (</div><div class="line">&lt;div&gt;</div><div class="line">此处是具体某一条数据的详细信息页，根据传入的参数（&#123;properties.params.circleID&#125;）读取接口，显示数据，进行逻辑操作。</div><div class="line">&lt;/div&gt;</div><div class="line">)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">module.exports = circleItem</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CSS背景图片处理]]></title>
      <url>https://qingege.github.io/2016/07/21/css/css/</url>
      <content type="html"><![CDATA[<p>前端设计页面时，经常会遇到背景图片处理的问题，我们来介绍一下常见的几种背景图片的处理方法：</p>
<h4 id="背景透明度问题"><a href="#背景透明度问题" class="headerlink" title="背景透明度问题"></a>背景透明度问题</h4><p> 1 背景透明<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">background-color:transparent;背景透明</div></pre></td></tr></table></figure></p>
<p> 2 背景颜色透明<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">background: rgba(255,127,80,0.3);// RGBA（红、绿、蓝、透明度）</div><div class="line">background: hsla(0,100%,50%,0.5);// HSLA（色调、饱和、亮度、透明度）</div></pre></td></tr></table></figure></p>
<p> 3 单独设置透明度<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">opacity:0.7;//透明度</div></pre></td></tr></table></figure></p>
<h4 id="背景样式处理"><a href="#背景样式处理" class="headerlink" title="背景样式处理"></a>背景样式处理</h4><p> 背景平铺<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">background-image: url(../img/homepage.jpg);//图片</div><div class="line">background-repeat: no-repeat;  //不可重复</div><div class="line">background-clip: border-box;  //不可以在边框中显示</div><div class="line">background-color: #F4BF31; //颜色</div><div class="line">background-size: cover;//铺满</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[webpack笔记]]></title>
      <url>https://qingege.github.io/2016/07/01/heco/</url>
      <content type="html"><![CDATA[<p>categories:</p>
<ul>
<li>Diary<br>tags:</li>
<li>PS3</li>
<li>Games<h3 id="webpack是个事"><a href="#webpack是个事" class="headerlink" title="webpack是个事"></a>webpack是个事</h3><h6 id="哈哈哈哈"><a href="#哈哈哈哈" class="headerlink" title="哈哈哈哈"></a>哈哈哈哈</h6></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[react笔记]]></title>
      <url>https://qingege.github.io/2016/07/01/new/</url>
      <content type="html"><![CDATA[<h1 id="动手术的冯绍峰的"><a href="#动手术的冯绍峰的" class="headerlink" title="动手术的冯绍峰的"></a>动手术的冯绍峰的</h1><h2 id="是的发的是水电费"><a href="#是的发的是水电费" class="headerlink" title="是的发的是水电费"></a>是的发的是水电费</h2><h3 id="webpack是个事"><a href="#webpack是个事" class="headerlink" title="webpack是个事"></a>webpack是个事</h3><h4 id="大多数的所得税"><a href="#大多数的所得税" class="headerlink" title="大多数的所得税"></a>大多数的所得税</h4>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>https://qingege.github.io/2016/07/01/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><a id="more"></a>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    </entry>
    
  
  
</search>

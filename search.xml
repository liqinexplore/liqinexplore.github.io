<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title></title>
      <url>https://qingege.github.io/2016/07/28/JavaScript/js_zujian/</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[Vue]]></title>
      <url>https://qingege.github.io/2016/07/28/vue/vue/</url>
      <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&lt;div id=&quot;example-1&quot;&gt;</div><div class="line">  Hello &#123;&#123; name &#125;&#125;!</div><div class="line">&lt;/div&gt;</div><div class="line">// 这是我们的 Model</div><div class="line">var exampleData = &#123;</div><div class="line">  name: &apos;Vue.js&apos;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 创建一个 Vue 实例或 &quot;ViewModel&quot;</div><div class="line">// 它连接 View 与 Model</div><div class="line">var exampleVM = new Vue(&#123;</div><div class="line">  el: &apos;#example-1&apos;,</div><div class="line">  data: exampleData</div><div class="line">&#125;)</div><div class="line">&lt;ul v-for=&quot;dataitme in title&quot;&gt;</div><div class="line">&lt;!--v-for指令基于一个数组渲染一个列表 item in items，items 是数据数组，item 是当前数组元素的别名--&gt;</div><div class="line">&lt;li&gt;&#123;&#123;dataitme.test&#125;&#125;&lt;/li&gt;</div><div class="line">&lt;li&gt;&#123;&#123;dataitme.test2&#125;&#125;&lt;/li&gt;</div><div class="line">&lt;/ul&gt;</div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="双向绑定："><a href="#双向绑定：" class="headerlink" title="双向绑定："></a>双向绑定：</h3><p>v-model 指令在表单控件元素上创建双向数据绑定。</p>
<p>Mustache 标签也可以用在 HTML 特性 (Attributes) 内：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line">&lt;divid=&quot;item-&#123;&#123; id &#125;&#125;&quot;&gt;&lt;/div&gt;</div><div class="line"></div><div class="line">Vue.filter(&apos;showScore&apos;, function (value, size) &#123;&#125;）;</div><div class="line"></div><div class="line">function connectWebViewJavascriptBridge(callback) &#123;</div><div class="line">if (window.WebViewJavascriptBridge) &#123;</div><div class="line">        callback(WebViewJavascriptBridge);</div><div class="line">    &#125; else &#123;</div><div class="line">document.addEventListener(&apos;WebViewJavascriptBridgeReady&apos;, function () &#123;</div><div class="line">            callback(WebViewJavascriptBridge);</div><div class="line">        &#125;, false);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">connectWebViewJavascriptBridge(function (bridge) &#123;</div><div class="line">_bridge = bridge;</div><div class="line"></div><div class="line">    bridge.init(function (message, responseCallback) &#123;</div><div class="line">generateHtml(JSON.parse(message).data);</div><div class="line">    &#125;);</div><div class="line">&#125;);</div><div class="line">function generateHtml(info) &#123;</div><div class="line">Vue.filter(&apos;showScore&apos;, function (value, size) &#123;</div><div class="line">            size = size || &apos;big&apos;;</div><div class="line">var h = [&quot;&lt;img src=&apos;star_&quot; + size + &quot;_empty.png&apos;/&gt;&quot;, &quot;&lt;img src=&apos;star_&quot; + size + &quot;_empty.png&apos;/&gt;&quot;, &quot;&lt;img src=&apos;star_&quot; + size + &quot;_empty.png&apos;/&gt;&quot;, &quot;&lt;img src=&apos;star_&quot; + size + &quot;_empty.png&apos;/&gt;&quot;, &quot;&lt;img src=&apos;star_&quot; + size + &quot;_empty.png&apos;/&gt;&quot;];</div><div class="line">for (var i = 0; i &lt; value; i++) &#123;</div><div class="line">if (i + 1 &gt; value) &#123;</div><div class="line">h[i] = &quot;&lt;img src=&apos;star_&quot; + size + &quot;_half.png&apos;/&gt;&quot;;</div><div class="line">                &#125; else &#123;</div><div class="line">h[i] = &quot;&lt;img src=&apos;star_&quot; + size + &quot;_full.png&apos;/&gt;&quot;;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">return h.join(&apos;&apos;);</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">new Vue(&#123;</div><div class="line">el: &apos;#container&apos;,</div><div class="line">data: info,</div><div class="line">methods: &#123;</div><div class="line">loadPage: function () &#123;</div><div class="line"></div><div class="line">var that = this;</div><div class="line">_bridge.callHandler(&apos;loadOrderCommentListByPageIndex&apos;, &#123;&apos;pageNo&apos;: ++pageNo&#125;, function (response) &#123;</div><div class="line">//JavaScript调用方法</div><div class="line">response = JSON.parse(response)</div><div class="line">that.commentlist = that.commentlist.concat(response.date.commentlist);</div><div class="line">that.totalscore = response.date.totalscore;</div><div class="line">                    &#125;);</div><div class="line">                &#125;,</div><div class="line">toggleClass: function (className, index) &#123;</div><div class="line">var el = document.getElementsByClassName(&quot;comment_context&quot;)[index];</div><div class="line">if (el.className.lastIndexOf(className) &gt;= 0) &#123;</div><div class="line">el.className = &quot;comment_context&quot;;</div><div class="line">                    &#125;</div><div class="line">else &#123;</div><div class="line">el.className = &quot;comment_context line_ellipse_5&quot;;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;,</div><div class="line">ready: function () &#123;</div><div class="line">document.getElementById(&quot;container&quot;).style.display = &quot;block&quot;;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<h3 id="过滤器："><a href="#过滤器：" class="headerlink" title="过滤器："></a>过滤器：</h3><p> Vue.filter() 注册一个自定义过滤器，它接收两个参数：过滤器 ID 和过滤器函数。</p>
<p>在 Vue.js，我们使用 v-if 指令实现同样的功能：</p>
<p v-if="greeting">Hello!</p>

<p>这里 v-if 指令将根据表达式 greeting 值的真假删除/插入 </p><p> 元素。<br><a v-bind:href="url"></a><br>这里 href 是参数，它告诉 v-bind 指令将元素的 href 特性跟表达式 url 的值绑定。可能你已注意到可以用特性插值 href=”“ 获得同样的结果：这样没错，并且实际上在内部特性插值会转为 v-bind 绑定。<br>另一个例子是 v-on 指令，它用于监听 DOM 事件：<br><a v-on:click="doSomething"><br>这里参数是被监听的事件的名字。我们也会详细说明事件绑定。</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Fetch 请求]]></title>
      <url>https://qingege.github.io/2016/07/28/new/</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title></title>
      <url>https://qingege.github.io/2016/07/28/heco/</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[js 随机数]]></title>
      <url>https://qingege.github.io/2016/07/28/JavaScript/js_random/</url>
      <content type="html"><![CDATA[<ul>
<li>Math.random(); 结果为0-1间的一个随机数(包括0,不包括1)</li>
<li>Math.floor(num); 参数num为一个数值，函数结果为num的整数部分。</li>
<li>Math.round(num); 参数num为一个数值，函数结果为num四舍五入后的整数。</li>
<li>Math：数学对象，提供对数据的数学计算。</li>
<li>Math.random(); 返回0和1间(包括0,不包括1)的一个随机数。</li>
<li>Math.ceil(n); 返回大于等于n的最小整数。</li>
<li>用Math.ceil(Math.random()*10);时，主要获取1到10的随机整数，取0的几率极小。</li>
<li>Math.round(n); 返回n四舍五入后整数的值。</li>
<li>用Math.round(Math.random());可均衡获取0到1的随机整数。</li>
<li>用Math.round(Math.random()*10);时，可基本均衡获取0到10的随机整数，其中获取最小值0和最大值10的几率少一半。</li>
<li>Math.floor(n); 返回小于等于n的最大整数。</li>
<li>用Math.floor(Math.random()*10);时，可均衡获取0到9的随机整数。<a id="more"></a>
</li>
</ul>
<p>toString() 方法可把一个逻辑值转换为字符串<br>split() 方法用于把一个字符串分割成字符串数组<br>join() 方法用于把数组中的所有元素放入一个字符串。<br>随机数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Math.random().toString(36).split(&apos;.&apos;).join(&apos;&apos;)</div><div class="line">Math.random().toString(36).split(&apos;.&apos;).join(&apos;&apos;)</div><div class="line">//&quot;0jl9mdgg6w1e46d30bzjx7p66r&quot;</div></pre></td></tr></table></figure></p>
<p>###下面效果图<br><img src="http://o6znw17tt.bkt.clouddn.com/random.png" alt="image"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CSS背景图片处理]]></title>
      <url>https://qingege.github.io/2016/07/28/css/css/</url>
      <content type="html"><![CDATA[<p>前端设计页面时，经常会遇到背景图片处理的问题，我们来介绍一下常见的几种背景图片的处理方法：</p>
<h4 id="背景透明度问题"><a href="#背景透明度问题" class="headerlink" title="背景透明度问题"></a>背景透明度问题</h4><p> 1 背景透明<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">background-color:transparent;背景透明</div></pre></td></tr></table></figure></p>
<p> 2 背景颜色透明<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">background: rgba(255,127,80,0.3);// RGBA（红、绿、蓝、透明度）</div><div class="line">background: hsla(0,100%,50%,0.5);// HSLA（色调、饱和、亮度、透明度）</div></pre></td></tr></table></figure></p>
<p> 3 单独设置透明度<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">opacity:0.7;//透明度</div></pre></td></tr></table></figure></p>
<h4 id="背景样式处理"><a href="#背景样式处理" class="headerlink" title="背景样式处理"></a>背景样式处理</h4><p> 背景平铺<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">background-image: url(../img/homepage.jpg);//图片</div><div class="line">background-repeat: no-repeat;  //不可重复</div><div class="line">background-clip: border-box;  //不可以在边框中显示</div><div class="line">background-color: #F4BF31; //颜色</div><div class="line">background-size: cover;//铺满</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[javascript总结]]></title>
      <url>https://qingege.github.io/2016/07/28/JavaScript/js_zong/</url>
      <content type="html"><![CDATA[<h3 id="js-常用知识总结"><a href="#js-常用知识总结" class="headerlink" title="js 常用知识总结"></a>js 常用知识总结</h3><p>下面总结一下我们在项目中常用的程序介绍<br><strong> 字符串和json对象之间的转换</strong></p>
<ul>
<li><p>parse从字符串中解析出json对象</p>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">//数组</div><div class="line">var str = &apos;&#123;&quot;name&quot;:&quot;huangxiaojian&quot;,&quot;age&quot;:&quot;23&quot;&#125;&apos;</div><div class="line">结果：</div><div class="line">    JSON.parse(str)</div><div class="line">    Object</div><div class="line">    age: &quot;23&quot;</div><div class="line">    name: &quot;huangxiaojian&quot;</div><div class="line">    __proto__: Object</div></pre></td></tr></table></figure>
<p>  <strong>注意：单引号写在{}外，每个属性名都必须用双引号，否则会抛出异常。</strong></p>
<ul>
<li><p>stringify()用于从一个对象解析出字符串，</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">//json对象</div><div class="line">    var a = &#123;a:1,b:2&#125;</div><div class="line">    结果：</div><div class="line">    JSON.stringify(a)</div><div class="line">    //字符串</div><div class="line">    &quot;&#123;&quot;a&quot;:1,&quot;b&quot;:2&#125;&quot;</div></pre></td></tr></table></figure>
<h3 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h3></li>
</ul>
<ul>
<li><p>使用Array构造函数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var a = new Array()</div><div class="line">var b = new Array(5);  //创建长度为5的数组</div><div class="line">var c = new Array(&quot;a&quot;,&quot;b&quot;,&quot;c&quot;);</div></pre></td></tr></table></figure>
</li>
<li><p>使用数组字面量表示法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var a = [];</div><div class="line">var b = [5];  //创建一个含数字5的数组</div><div class="line">var c = [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;];</div></pre></td></tr></table></figure>
<h3 id="数组属性"><a href="#数组属性" class="headerlink" title="数组属性"></a>数组属性</h3></li>
<li><p>length表示数组的长度</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var colors = [&quot;red&quot;,&quot;green&quot;,&quot;blue&quot;,&quot;black&quot;];</div><div class="line">colors.length   //4</div></pre></td></tr></table></figure>
</li>
<li><p>length属性并不是只读的，通过设置该值可以从数组末尾删除项或向数组中添加项</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">    var colors = [&quot;red&quot;,&quot;green&quot;,&quot;blue&quot;,&quot;black&quot;];</div><div class="line">colors.length = 2;        //colors:[&quot;red&quot;,&quot;green&quot;]</div><div class="line">colors.length = 4;        //colors:[&quot;red&quot;,&quot;green&quot;,undefined,undefined]</div></pre></td></tr></table></figure>
<h3 id="数组方法"><a href="#数组方法" class="headerlink" title="数组方法"></a>数组方法</h3></li>
<li>栈、队列方法<br>数组的模拟栈(FILO) 和队列(FIFO) 方法(均改变原来数组)</li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">var a = [6, 2, 3, &apos;a&apos;, &apos;x&apos;, 20],</div><div class="line">b = a.push(&apos;ab&apos;),    //末尾添加元素，并返回新长度</div><div class="line">c = a.pop(),         //删除并返回数组的最后一个元素</div><div class="line">d = a.unshift(&apos;xy&apos;), //开头添加元素，并返回新长度</div><div class="line">e = a.shift();       //删除并返回数组的第一个元素</div><div class="line">console.log(a);</div><div class="line">console.log(b);</div><div class="line">console.log(c);</div><div class="line">console.log(d);</div><div class="line">console.log(e);</div><div class="line">结果：</div><div class="line">[6, 2, 3, &quot;a&quot;, &quot;x&quot;, 20]</div><div class="line">7</div><div class="line">ab</div><div class="line">7</div><div class="line">xy</div></pre></td></tr></table></figure>
<pre><code>1. push(item...) 向数组中添加元素，返回修改后数组的长度
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var numbers= [1,2,3,4];</div><div class="line">numbers.push(5)   //5   numbers:[1,2,3,4,5]</div><div class="line">numbers.push(6,7) //7   numbers:[1,2,3,4,5,6,7]</div></pre></td></tr></table></figure>
<pre><code>2. pop() 从数组末尾移除一项，减少数组的长度，返回移除的项
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var numbers= [1,2,3,4];</div><div class="line">numbers.pop()   //4         numbers:[1,2,3]</div></pre></td></tr></table></figure>
<pre><code>3. unshift(item...) 向数组前端添加任意项，返回 修改后数组的长度
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var numbers= [1,2,3,4];</div><div class="line">        numbers.unshift(5)   //5   numbers:[5,1,2,3,4]</div><div class="line">        numbers.unshift(6,7) //7   numbers:[6,7,5,1,2,3,4]</div></pre></td></tr></table></figure>
<pre><code>4. shift() 移除数组第一项，减少数组的长度，返回移除的项
</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var numbers= [1,2,3,4];</div><div class="line">        numbers.shift()   //1         numbers:[2,3,4]</div></pre></td></tr></table></figure>
<ul>
<li><p>排序方法</p>
<ol>
<li><p>数组反序 reverse() 反转数组项的顺序，改变原数组</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var a = [6, 2, 3, &apos;a&apos;, &apos;x&apos;, 20],</div><div class="line">b = a.reverse();       //返回a的引用</div><div class="line">console.log(a);</div><div class="line">console.log(b);</div><div class="line">结果 [20, &quot;x&quot;, &quot;a&quot;, 3, 2, 6]</div><div class="line">[20, &quot;x&quot;, &quot;a&quot;, 3, 2, 6]</div></pre></td></tr></table></figure>
</li>
<li><p>数组排序 sort<br>sort()默认情况下，即无参数情况，sort()方法按升序排列数组。该方法会调用每个数组项的tostring()方法，然后比较字符串，因此即使数组中每一项都是数值，sort()方法比较的也是字符串。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"> var a = [6, 2, 3, &apos;a&apos;, &apos;x&apos;, 20],</div><div class="line"> b = a.sort();          //ASC表顺序，先看首位，因此20排在3前面</div><div class="line"> console.log(a);            //a变化了</div><div class="line"> console.log(b);</div><div class="line"> a.push(&apos;k&apos;);</div><div class="line"> console.log(b);            //a和b指向同一个对象，b相当于a的别名</div><div class="line"> 结果：</div><div class="line"> [2, 20, 3, 6, &quot;a&quot;, &quot;x&quot;]</div><div class="line"> [2, 20, 3, 6, &quot;a&quot;, &quot;x&quot;]</div><div class="line"> [2, 20, 3, 6, &quot;a&quot;, &quot;x&quot;, &quot;k&quot;]</div><div class="line"> ```      </div><div class="line"> * 操作、位置方法</div><div class="line">合并数组的值为字符串 join</div></pre></td></tr></table></figure>
</li>
</ol>
</li>
</ul>
<p>var a = [1, 2, 3],<br>        b = a.join(‘<em>‘); //默认为之间加上 ，<br>        console.log(a);      //a并没有变<br>        console.log(b);<br>        结果<br>        [1, 2, 3]<br>        1</em>2*3<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">   </div><div class="line">1. 合并数组 concat</div><div class="line">concat()其参数可以是一个或多个项，也可以是一个或多个数组。创建一个当前数组的副本，然后在数组末尾添加参数项，并返回** 新的数组 **，原数组不变</div></pre></td></tr></table></figure></p>
<pre><code>var a = [1, 2, 3],
b = [4, 5, 6],
c;
c = b.concat(a);     //将a加在b上,返回新数组，a和b并没有变。参数数量不限
console.log(b);
console.log(c);
结果
[4, 5, 6]
[4, 5, 6, 1, 2, 3]
</code></pre> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">2. 取数组中需要的部分 slice</div><div class="line">获取截取数组，如果是一个参数，则获取从该参数位置开始到数组结束所有值，如果有两个参数，则获取从起始值位置到结束值位置的值（不包括结束值位置项），返回新的数组。原数组不变</div><div class="line">如果结束值小于起始位置则返回空数组。</div></pre></td></tr></table></figure>
<p>var a = [6, 2, 3, ‘a’, ‘x’, 20],<br>        b = a.slice(0, 2);//下标从0取到2(不包括2)，没有第二个参数则默认到末尾。第一个参数为负表示从末尾开始数。第一个参数小于第二个参数则为空。<br>        console.log(a);<br>        console.log(b);   //b是a一部分的副本,a本身不变<br>        结果<br>         [6, 2, 3, “a”, “x”, 20]<br>         [6, 2]<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">注意： 如果参数中存在负数，则将参数值加上数组长度来计算。如：</div></pre></td></tr></table></figure></p>
<p>var numbers= [1,2,3,4];<br>numbers.slice(-1)          //[4]         numbers:[1,2,3,4]<br>numbers.slice(-4,-2)       //[1,2]         numbers:[1,2,3,4]<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">3. 修改数组 splice (既然是修改数组，肯定数组本身会变的啦)</div></pre></td></tr></table></figure></p>
<p>var a = [1, 2, 3, 4],<br>    b = a.splice(0, 2, 6);<br>console.log(a);<br>console.log(b);          //b为被删掉的数组部分<br>结果：<br>[6, 3, 4]<br>[1, 2]<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">　　a.splice(index, num, newItem1, newItem2...):index为开始选择的元素下标，num为接下来要删除元素的个数，newItem为接下来(在删完的地方)要添加的新元素(非必须)。这个方法用途最多，如</div><div class="line"></div><div class="line">　　删除指定下标(2,也就是第三个)元素,此时不设置需要添加的newItem，而num设为1</div></pre></td></tr></table></figure></p>
<p>var a = [1, 2, 3, 4],<br>    b = a.splice(2, 1);<br>console.log(a);<br>console.log(b);<br>　　在任意位置添加任意多个元素(如在下标2后添加两个元素’7’,’8’),此时num设为0</p>
<p>var a = [1, 2, 3, 4],<br>    b = a.splice(2, 0, 7,8);<br>console.log(a);<br>console.log(b);   //没有删除，b返回[]<br>结果<br>[1, 2, 4]<br>[3]<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">　　根据元素值删除元素(结合jquery)</div></pre></td></tr></table></figure></p>
<p>var a=[‘one’,’da’,’xiao’,’ha’];<br>a.splice($.inArray(‘da’,a),1);<br>console.log(a);<br>结果<br>[“one”, “xiao”, “ha”]<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">4.  indexOf()从前向后查找，接受两个参数：查找的项和查找的起点位置（可选），默认从数组的起始位置向后查找，返回索引值</div></pre></td></tr></table></figure></p>
<p>var numbers= [1,2,3,4,4,5,3,1,2];<br>numbers.indexOf(2)              //1        numbers:[1,2,3,4,4,5,3,1,2]<br>numbers.indexOf(2,4)              //8       numbers:[1,2,3,4,4,5,3,1,2]<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">5. lastIndexOf()从后向前查找，接受两个参数：查找的项和查找的起点位置（可选），默认从数组的结束位置向前查找，返回索引值</div></pre></td></tr></table></figure></p>
<p>var numbers= [1,2,3,4,4,5,3,1,2];<br>numbers.lastIndexOf(2)              //8        numbers:[1,2,3,4,4,5,3,1,2]<br>numbers.lastIndexOf(4,3)            //3        numbers:[1,2,3,4,4,5,3,1,2], 从[3]位向前查找<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">* 遍历方法</div><div class="line"></div><div class="line">1. every(fn)对数组中的每一项运行给定的函数，如果该函数对每一项都返回true,则返回true</div></pre></td></tr></table></figure></p>
<p>var numbers= [1,2,3,4,5];<br>numbers.every(function(item,index,array){<br>  return (item&gt;0);<br>})                                                          //true<br>numbers.every(function(item,index,array){<br>  return (item&gt;2);<br>})  //false<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">2. filter(fn)对数组中的每一项运行给定的函数，返回该函数会返回true的项组成的数组</div></pre></td></tr></table></figure></p>
<p>var numbers= [1,2,3,4,5];<br>numbers.filter(function(item,index,array){<br>   return (item&gt;2);<br>})  //[3,4,5]<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">3. forEach(fn)对数组中的每一项运行给定的函数，没有返回值</div><div class="line">4. map(fn)对数组中的每一项运行给定的函数，返回每次函数调用的结果组成的数组</div></pre></td></tr></table></figure></p>
<p>var numbers= [1,2,3,4,5];<br>numbers.map(function(item,index,array){<br>  return (item+10);<br>})//[11,12,13,14,15]<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">5. some(fn)对数组中的每一项运行给定的函数，如果该函数对任一项返回true,则返回true</div></pre></td></tr></table></figure></p>
<p>var numbers= [1,2,3,4,5];<br>numbers.some(function(item,index,array){<br>  return (item&gt;3);<br>})<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">6. 遍历数组 (同时也是对象遍历属性的方法)</div></pre></td></tr></table></figure></p>
<pre><code>var a = [1, 2, 3];
for (x in a) {
console.log(x);
}
结果 0 1 2

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"> </div><div class="line">- 小结:综上所述，js数组的原生方法里面</div><div class="line">- 修改自身的有: splice, pop, push, shift, unshift, sort, reverse</div><div class="line">- 不修改自己身的: slice, concat, join</div><div class="line"></div><div class="line">**Jquery常用js方法**</div><div class="line">　1. 遍历</div><div class="line">　可以对所有的元素进行操作。如果想要满足条件退出，用return false(       绝大部分jquery方法都可以这么退出)。</div></pre></td></tr></table></figure>
</code></pre><p>　　$.each(arr, callback(key, val));      //可以链式调用，返回arr，为本身<br>　var a = [1, 2, 3, 4];<br>$.each(a, function(key, val) {     //以jQuery对象的方法调用，兼容性好;也可以用$(a)将a转化为jquery对象，然后以$(a).each(function(){})的形式调用,下面的方法同<br>console.log(a[key] + ‘下标为’ + key + ‘值为’ + val);<br>});<br>结果<br>1下标为0值为1<br>2下标为1值为2<br>3下标为2值为3<br>4下标为3值为4<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">2. 筛选</div><div class="line">　　$.grep(arr, callback, invert)</div><div class="line"></div><div class="line">　　invert为false表示对callback的筛选取反。 默认为true。</div></pre></td></tr></table></figure></p>
<p>var a = [1, 2, 3, 4];<br>$.grep(a, function(val, key) {  //不能链式调用，返回[],所以可以加上return实现链式,返回满足条件的副本<br>　　if (a[key] &gt; 2) {<br>　　　　console.log(key);<br>　　}<br>　　return val;<br>});</p>
<p>　　常用做获取两个数组中相同(或不相同)的部分<br>var a= [1, 2, 3, 4],<br>    b=[1,3,5,7];<br>$.grep(a,function(val,key){<br>    if(b.indexOf(val)&gt;=0){<br>        return val;<br>    }<br>},false)</p>
<p>结果：[1, 3]<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">4.合并</div><div class="line">　　$.merge(arr1,arr2)  arr1后面加上arr2后返回arr1</div></pre></td></tr></table></figure></p>
<p>var a=[1,2,3],<br>    b=[4,5,6];<br>$.merge(a,b);             //可以有多个参数(居然不报错!)，但是第三个及以后的没用(test in FF and Chrome)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">　　</div><div class="line">　　　5.过滤相同元素</div><div class="line">　　$.unique(arr)//过滤Jquery对象数组中重复的元素(内部实现为===)(不同版本不一样，不要用)</div></pre></td></tr></table></figure></p>
<p>var a = [ 1 , 1 , 2 , 3 , 7 , 4 , 5 , 5 , 6 , 6 ];<br>$.unique(a)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">　　6.判断</div><div class="line">　　$.inArray(val,arr)  判断val是否在arr里面</div></pre></td></tr></table></figure></p>
<p>var a = [1, 2, 3, 4];<br>$.inArray(2, a);     //有的话返回下标，没有的话返回-1<br>```</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[fullPage]]></title>
      <url>https://qingege.github.io/2016/07/28/hello-world/</url>
      <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">sectionsColor:</div><div class="line">可以给每一个section设置background-colors属性</div><div class="line"> sectionsColor:[red,yellow,....]</div><div class="line">controArrows：</div></pre></td></tr></table></figure>
<a id="more"></a>
<p> 定义是否通过箭头来控制slide幻灯片 默认是true flase表示没有箭头<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;section&quot;&gt;</div><div class="line">    &lt;div class=&quot;slide&quot; style=&quot;background: yellow&quot;&gt;slide1&lt;/div&gt;</div><div class="line"></div><div class="line">    &lt;div class=&quot;slide&quot; style=&quot;background: blueviolet&quot;&gt;slide1&lt;/div&gt;</div><div class="line"></div><div class="line">    &lt;div class=&quot;slide&quot; style=&quot;background: yellowgreen&quot;&gt;slide1&lt;/div&gt;</div><div class="line"></div><div class="line">    &lt;div class=&quot;slide&quot;  style=&quot;background: darkorange&quot;&gt;slide1&lt;/div&gt;</div><div class="line">    &lt;div class=&quot;slide&quot; style=&quot;background: greenyellow&quot;&gt;slide1&lt;/div&gt;</div><div class="line"></div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure></p>
<ul>
<li>verticalCentered： 每一页的内容是否垂直居中</li>
<li><p>resize：字体是否随着窗口的缩放而缩放 ，默认为false</p>
<ul>
<li>scrollingSpeed: 滚动的速度，单位是毫秒，默认为700</li>
<li><p>anchors: 定义锚链接。默认值为[] 有了锚链接，用户就可以快速打开定位到某一个页面<br>注意定义锚链接的时候，值不要和页面中任意的id和那么相同，尤其是在IE浏览器下。而且定义时不需要加#</p>
</li>
<li><p>在class中添加active能够实现自动定位</p>
</li>
<li><p>lockAnchors: 是否锁定锚链接  就是能够锁定一个页面滚动时不变</p>
</li>
<li><p>easing：<br>定义要么section滚动动画方式。默认为easeInOutCubic</p>
</li>
<li><p>css3:<br>能够实现css3样式</p>
</li>
<li><p>loopTop：<br>滚动到最顶部后是否连续滚动到底部，默认为false</p>
</li>
<li>loopBottom：<br>滚动到最底部后是否连续滚动回顶部，默认为false</li>
</ul>
</li>
<li>loopHorizontal：<br>横向slider幻灯片是否循环滚动。默认为true</li>
<li>autoScrolling:<br>是否使用插件的滚动方式。默认为true，如果选择false，则会出现浏览器自带的滚动条，将不会按页滚动。而是按照滚动条的默认行为来滚动</li>
<li>scrollBar:<br>是否包含滚动条，默认为false，如果设置为true，则浏览器自带的滚动条出现，不过是按照页滚动的额</li>
<li>paddingTop/paddingBottom：<br>设置每一个section顶部和底部的padding ，默认都为0.一般如果我们需要设置一个固定在顶部或者底部的菜单。导航。元素等，可以使用这两个配置项</li>
<li>fixedElements:<br>固定的元素，默认为null，需要配置一个jquery选择器。在页面滚动的时候。fixedElements设置的元素固定不动<br>实现绝对定位标题：</li>
</ul>
<ul>
<li>keyboardScrolling:<br>是否可以使用键盘方向键导航。默认为true</li>
<li>touchSensitivity：<br>在移动设备中滑动页面的敏感性，默认为5，是按百分比来衡量。最高为100，越大则越难滑动</li>
<li>continuousVertical：<br>是否循环滚动</li>
<li><p>continuousVertical:true</p>
</li>
<li><p>animateAnchor<br>锚链接是否可以控制滚动动画。默认为true<br>如果设置为false，则通过锚链接定位到某个页面显示不再有动画效果</p>
</li>
<li><p>recordHository：<br>是否记录历史默认为true</p>
</li>
<li>menu:<br>绑定菜单，设定的相关属性与anchors的值对应后，菜单可以控制滚动，默认为false，可以设置为菜单的jQuery选择器<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&lt;style&gt;</div><div class="line">ul &#123;</div><div class="line">position: fixed;</div><div class="line">top:100px;</div><div class="line">left: 100px;</div><div class="line">    &#125;</div><div class="line">&lt;/style&gt;</div><div class="line"></div><div class="line">&lt;ul id=&quot;fullpageMenu&quot;&gt;</div><div class="line">&lt;li data-menuanchor=&quot;page1&quot; class=&quot;active&quot;&gt;&lt;a href=&quot;#page1&quot;&gt;1 section&lt;/a&gt;&lt;/li&gt;</div><div class="line">&lt;li data-menuanchor=&quot;page2&quot;&gt;&lt;a href=&quot;#page2&quot;&gt;1 section&lt;/a&gt;&lt;/li&gt;</div><div class="line">&lt;li data-menuanchor=&quot;page3&quot; &gt;&lt;a href=&quot;#page3&quot;&gt;1 section&lt;/a&gt;&lt;/li&gt;</div><div class="line">&lt;li data-menuanchor=&quot;page4&quot;&gt;&lt;a href=&quot;#page4&quot;&gt;1 section&lt;/a&gt;&lt;/li&gt;</div><div class="line">&lt;li data-menuanchor=&quot;page5&quot;&gt;&lt;a href=&quot;#page5&quot;&gt;1 section&lt;/a&gt;&lt;/li&gt;</div><div class="line">&lt;/ul&gt;</div><div class="line"></div><div class="line">anchors:[&apos;page1&apos;,&apos;page2&apos;,&apos;page3&apos;,&apos;page4&apos;,&apos;page5&apos;],</div></pre></td></tr></table></figure>
</li>
</ul>
<p>menu:’#fullpageMenu’</p>
<ul>
<li>navigation:<br>是否显示导航，默认为false。如果设置为true，会显示小圆点，作为导航</li>
<li>navigationPosition：<br>导航小圆点的位置，可以设置为left 或者为right</li>
<li><p>navigationTooltips：<br>导航小圆点的tooltips设置，默认为[]注意顺序位置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">anchors:[&apos;page1&apos;,&apos;page2&apos;,&apos;page3&apos;,&apos;page4&apos;,&apos;page5&apos;],</div><div class="line">navigation:true,</div><div class="line">navigationPosition:&apos;right&apos;,</div><div class="line">navigationTooltips:[&apos;page1&apos;,&apos;page2&apos;,&apos;page3&apos;,&apos;page4&apos;,&apos;page5&apos;]</div></pre></td></tr></table></figure>
</li>
<li><p>showActiveTooltip:<br>是否显示当前页面的导航的tooltip信息。默认为false</p>
</li>
<li><p>showActiveTooltip:true,</p>
</li>
<li><p>slidesNavigation：<br>是否显示横向幻灯片的导航，默认为false</p>
</li>
<li>slidesNavPosition：<br>横向幻灯导航的位置默认为bottom，可以设置为top或bottom<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">slidesNavigation:true,</div><div class="line">slidesNavPosition:&apos;top&apos;,</div><div class="line">scrollOverflow:</div><div class="line">内容超过满屏后是否显示滚动条，默认为false。如果设置为true，则会显示滚动条</div></pre></td></tr></table></figure>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">scrollOverflow:true</div><div class="line">  $(function()&#123;</div><div class="line">        $(&quot;#funllpage&quot;).fullpage(&#123;</div><div class="line">            sectionsColor:[&apos;green&apos;,&apos;greenyellow&apos;,&apos;darkorange&apos;,&apos;blueviolet&apos;],     //可以给每一个section设置background-colors属性</div><div class="line">           /* controlArrows:false,                      //定义是否通过箭头来控制slide幻灯片 默认是true flase表示没有箭头</div><div class="line">            verticalCentered:false*/                  // 每一页的内容是否垂直居中</div><div class="line">           /* resize:true*/                                 //字体是否随着窗口的缩放而缩放 ，默认为false</div><div class="line">           /* scrollingSpeed:100,                   //滚动的速度，单位是毫秒，默认为700</div><div class="line">            anchors:[&apos;page1&apos;,&apos;page2&apos;,&apos;page3&apos;,&apos;page4&apos;,&apos;page5&apos;],*/   //: 定义锚链接。默认值为[] .有了锚链接，用户就可以快速打开定位到某一个页面</div><div class="line">            //loopTop:true,     //滚动到最顶部后是否连续滚动到底部，默认为false</div><div class="line">           // loopBottom:true,//滚动到最底部后是否连续滚动回顶部，默认为false</div><div class="line"> loopHorizontal:true,//横向slider幻灯片是否循环滚动。默认为true</div><div class="line">            //paddingTop:&apos;100px&apos;,设置每一个section顶部和底部的padding ，默认都为0.一般如果我们需要设	置一个固定在顶部或者底部的菜单。导航。元素等，可以使用这两个配置项</div><div class="line">           // paddingBottom:&apos;100px&apos;</div><div class="line">            //fixedElements:&apos;#header&apos;,//固定的元素，默认为null</div><div class="line">            //continuousVertical:true//是否循环滚动</div><div class="line">          /*anchors:[&apos;page1&apos;,&apos;page2&apos;,&apos;page3&apos;,&apos;page4&apos;,&apos;page5&apos;],</div><div class="line">            menu:&apos;#fullpageMenu&apos;*/绑定菜单，设定的相关属性与anchors的值对应后，菜单可以控制滚动，默认为false，</div><div class="line">            /*anchors:[&apos;page1&apos;,&apos;page2&apos;,&apos;page3&apos;,&apos;page4&apos;,&apos;page5&apos;],</div><div class="line">           navigation:true,//导航小圆点的tooltips设置，默认为[]注意顺序位置</div><div class="line">            navigationPosition:&apos;right&apos;,</div><div class="line">            navigationTooltips:[&apos;page1&apos;,&apos;page2&apos;,&apos;page3&apos;,&apos;page4&apos;,&apos;page5&apos;],</div><div class="line">            showActiveTooltip:true,</div><div class="line">            slidesNavigation:true,</div><div class="line">            slidesNavPosition:&apos;top&apos;,*/</div><div class="line">            scrollOverflow:true</div><div class="line"></div><div class="line">        &#125;);</div><div class="line">    &#125;)</div></pre></td></tr></table></figure>
<p>方法<br>moveSectionUp()<br>上一页<br>$(“#funllpage”).fullpage.moveSectionUp()<br>moveSectionDown()<br>下一页<br>$(“#funllpage”).fullpage.moveSectionDown()<br>moveTo（1，2）//第一页 第三个小页<br>$(“#funllpage”).fullpage.moveTo(1,2)</p>
<p>回调<br>afterLoad(anchorLink,index)<br>滚动到某一个section，且滚动结束后，会触发一次此回调函数，函数接收anchorLink和index两个参数，<br>anchorLink 是锚链接的名称，index是序号，从1开始计算<br>我可以根据anchorLink和index参数值得判断，触发相应的事件<br> afterLoad:function(anchorLink,index){<br>                console.log(“afterLoad:anchorLink=”+anchorLink+”;index=”+index);<br>            }<br>结果：<br>afterLoad:anchorLink=page3;index=3<br> afterLoad:anchorLink=page4;index=4<br> afterLoad:anchorLink=page5;index=5<br>没滚动一次就会触发一次</p>
<p>onLeave(index,nextIndex,direction)<br>在离开一个section时，会触发一次此回调函数。接收index，nextIndex，<br>和direction3个参数<br>index 是离开的“页面”的序号，从1开始计算<br>nextIndex 是滚动到的目标”页面“序号，从1开始计算<br>direction判断往上滚动还是往下滚动，值是up或down<br>通过return false 可以取消滚动</p>
<p> onLeave:function(index,nextIndex,direction){<br>                console.log(“onLeave:index=”+index+”+nextIndex=”+nextIndex+”+direction=”+direction);<br>            }</p>
<p>结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">onLeave:index=1+nextIndex=2+direction=down</div><div class="line">onLeave:index=2+nextIndex=3+direction=down</div><div class="line">onLeave:index=3+nextIndex=4+direction=down</div><div class="line"> onLeave:index=4+nextIndex=3+direction=up</div></pre></td></tr></table></figure></p>
<p>afterRender:当滚动不是第一个的时候触发<br>onLeave:<br>faterLoad<br>afterRender</p>
<p>顺序是：<br>渲染完毕，先移到，再滚动</p>
<p>afterResize :改变尺寸的时候</p>
<p>afterSildeLoad(anchorLink,index,slideAnchor,slideIndex)<br>滚动到某一个幻灯片后回调函数 与afterLoad类似<br>onslideLeave（anchorLink，index，slideIndex，direction，nextSlideIndex）<br>在离开一个slide时，触发，和onleave类似</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[devtool 安装应用]]></title>
      <url>https://qingege.github.io/2016/07/28/react/devtool/</url>
      <content type="html"><![CDATA[<p>为了方便redux开发，更好的了解数据的变化，我们安装测试环境下的devtool</p>
<h3 id="1-安装-到开发模式"><a href="#1-安装-到开发模式" class="headerlink" title="1 安装 到开发模式"></a>1 安装 到开发模式</h3><p>npm install redux-devtools –save-dev<br> npm install redux-devtools-dock-monitor –save-dev<br>npm install redux-devtools-log-monitor –save-dev</p>
<h3 id="安装到正式环境"><a href="#安装到正式环境" class="headerlink" title="安装到正式环境"></a>安装到正式环境</h3><p>npm install redux-thunk –save<br>npm install redux-logger –save<br>创建 DevTools: devTools.js<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Created by Administrator on 2016/7/22.</div><div class="line"> */</div><div class="line">// 调试工具</div><div class="line">import React from &apos;react&apos;</div><div class="line">import &#123; createDevTools &#125; from &apos;redux-devtools&apos;</div><div class="line">import LogMonitor from &apos;redux-devtools-log-monitor&apos;</div><div class="line">import DockMonitor from &apos;redux-devtools-dock-monitor&apos;</div><div class="line"></div><div class="line">const DevTools = createDevTools(</div><div class="line">&lt;DockMonitor toggleVisibilityKey=&quot;ctrl-h&quot; changePositionKey=&quot;ctrl-q&quot;&gt;</div><div class="line">        &lt;LogMonitor theme=&quot;tomorrow&quot; preserveScrollTop=&#123;false&#125; /&gt;</div><div class="line">    &lt;/DockMonitor&gt;</div><div class="line">)</div><div class="line"></div><div class="line">export default DevTools</div></pre></td></tr></table></figure></p>
<h3 id="store配置-rootStore-js"><a href="#store配置-rootStore-js" class="headerlink" title="store配置  rootStore.js"></a>store配置  rootStore.js</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Created by Administrator on 2016/7/22.</div><div class="line"> */</div><div class="line"></div><div class="line">import thunk from &apos;redux-thunk&apos; // redux-thunk 支持 dispatch function，并且可以异步调用它</div><div class="line">import createLogger from &apos;redux-logger&apos; // 利用redux-logger打印日志</div><div class="line">import &#123; createStore, applyMiddleware, compose &#125; from &apos;redux&apos; // 引入redux createStore、中间件及compose</div><div class="line">import DevTools from &apos;./devtools&apos; // 引入DevTools调试组件</div><div class="line"></div><div class="line">// 调用日志打印方法</div><div class="line">const loggerMiddleware = createLogger()</div><div class="line"></div><div class="line">// 创建一个中间件集合</div><div class="line">const middleware = [thunk, loggerMiddleware]</div><div class="line"></div><div class="line">// 利用compose增强store，这个 store 与 applyMiddleware 和 redux-devtools 一起使用</div><div class="line">const finalCreateStore = compose(</div><div class="line">    applyMiddleware(...middleware),</div><div class="line">DevTools.instrument()</div><div class="line">)(createStore)</div><div class="line"></div><div class="line">export default finalCreateStore</div></pre></td></tr></table></figure>
<h3 id="index-js"><a href="#index-js" class="headerlink" title="index.js"></a>index.js</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">import &apos;babel-polyfill&apos;</div><div class="line">import React from &apos;react&apos;</div><div class="line">import &#123; render &#125; from &apos;react-dom&apos;</div><div class="line">import &#123; Provider &#125; from &apos;react-redux&apos;</div><div class="line">import &#123; createStore &#125; from &apos;redux&apos;</div><div class="line">import App from &apos;./containers/App&apos;</div><div class="line">import todoApp from &apos;./reducers&apos;</div><div class="line"></div><div class="line">import DevTools from &apos;./devTools&apos; // 引入Redux调试工具DevTools</div><div class="line">import finalCreateStore from &apos;./rootStore&apos;//引入增强后的store</div><div class="line">const store =finalCreateStore(todoApp);</div><div class="line">const rootElement=document.getElementById(&apos;root&apos;);</div><div class="line"></div><div class="line">render(</div><div class="line">&lt;Provider store=&#123;store&#125;&gt;</div><div class="line">       &lt;div&gt;</div><div class="line">           &lt;DevTools/&gt;</div><div class="line">       &lt;App /&gt;</div><div class="line"></div><div class="line">       &lt;/div&gt;</div><div class="line">   &lt;/Provider&gt;,</div><div class="line">rootElement</div><div class="line">)</div></pre></td></tr></table></figure>
<p>下面是效果图<br><img src="http://o6znw17tt.bkt.clouddn.com/clipboard2.png" alt="image"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Fetch 请求]]></title>
      <url>https://qingege.github.io/2016/07/28/react/fetch/</url>
      <content type="html"><![CDATA[<h2 id="Fetch-请求"><a href="#Fetch-请求" class="headerlink" title="Fetch 请求"></a>Fetch 请求</h2><p>下面我们介绍一下ajax替代功能Fetch请求<br>  由于 Fetch API 是基于 Promise 设计<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">fetch(url).then(function(response) &#123;//url 请求 response 返回数据</div><div class="line">return response.json();//将数据转换为json格式    </div><div class="line">&#125;).then(function(data) &#123;</div><div class="line">console.log(data);</div><div class="line">&#125;).catch(function(e) &#123;</div><div class="line">console.log(&quot;Oops, error&quot;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>下面是基本的介绍  </p>
<ul>
<li>Promise 构造函数接受一个函数作为参数，该函数的两个参数分别是 resolve 方法和 reject 方法。</li>
<li>如果异步操作成功，则用 resolve 方法将 Promise 对象的状态，从「未完成」变为「成功」（即从 pending 变为 resolved）；</li>
<li>如果异步操作失败，则用 reject 方法将 Promise 对象的状态，从「未完成」变为「失败」（-即从 pending 变为 rejected）。</li>
<li>promises 的奇妙在于给予我们以前的 return 与 throw，每个 Promise 都会提供一个 then() 函数，和一个 catch()，实际上是 then(null, …) 函数，</li>
</ul>
<p><strong> 使用 ES6 的 箭头函数 后：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">fetch(url).then(response =&gt; response.json())</div><div class="line">.then(data =&gt; console.log(data))</div><div class="line">.catch(e =&gt; console.log(&quot;Oops, error&quot;, e))</div><div class="line">现在看起来好很多了，但这种 Promise 的写法还是有 Callback 的影子，而且 promise 使用 catch 方法来进行错误处理的方式有点奇怪。不用急，下面使用 async/await 来做最终优化：</div><div class="line">注：async/await 是非常新的 API，属于 ES7，目前尚在 Stage 1(提议) 阶段，这是它的完整规范。使用 Babel 开启 runtime 模式后可以把 async/await 无痛编译成 ES5 代码。也可以直接使用 regenerator 来编译到 ES5。</div><div class="line">try &#123;</div><div class="line">let response = await fetch(url);</div><div class="line">let data = response.json();</div><div class="line">console.log(data);</div><div class="line">&#125; catch(e) &#123;</div><div class="line">console.log(&quot;Oops, error&quot;, e);</div><div class="line">&#125;</div><div class="line">// 注：这段代码如果想运行，外面需要包一个 async function</div></pre></td></tr></table></figure></p>
<p>duang~~ 的一声，使用 await 后，写异步代码就像写同步代码一样爽。await 后面可以跟 Promise 对象，表示等待 Promise resolve() 才会继续向下执行，如果 Promise 被 reject() 或抛出异常则会被外面的 try…catch 捕获。<br>下面是我在项目中的实际应用，放在下面供大家参考<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">function streamingDemo() &#123;</div><div class="line">var req = newRequest(URL, &#123;method: &apos;GET&apos;, cache: &apos;reload&apos;&#125;);</div><div class="line">fetch(req).then(function (response) &#123;</div><div class="line">var reader = response.body.getReader();</div><div class="line">return reader.read();</div><div class="line">&#125;).then(function (result, done) &#123;</div><div class="line">if (!done) &#123;// do something with each chunk</div><div class="line">&#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line">fetch(PRO_URL.gallery.olympic.del_an_item.url, &#123;method: &apos;POST&apos;, body: JSON.stringify(&#123;newsId: id&#125;)&#125;)</div><div class="line">    .then((res)=&gt; &#123;</div><div class="line">        res.json();</div><div class="line">&#125;)</div><div class="line">    .then((data)=&gt; &#123;</div><div class="line">if (data.rc == 0) &#123;</div><div class="line">getOlympicAll();</div><div class="line">&#125;</div><div class="line">    &#125;)</div><div class="line">    .catch((e)=&gt; &#123;</div><div class="line">        message.info(&quot;删除失败&quot; + e, 5);</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>出现错误欢迎大家指正。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[React组件属性类型（propTypes）]]></title>
      <url>https://qingege.github.io/2016/07/28/react/propTypes/</url>
      <content type="html"><![CDATA[<h2 id="Prop-验证"><a href="#Prop-验证" class="headerlink" title="Prop 验证"></a>Prop 验证</h2><p>为了验证组件之间传入的值，我们引入propTypes。React.PropTypes 提供很多验证器 (validator) 来验证传入数据的有效性。当向 props 传入无效数据时，JavaScript 控制台会抛出警告。注意为了性能考虑，只在开发环境验证 propTypes。<br><a id="more"></a><br>下面是各个验证情况的介绍：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div></pre></td><td class="code"><pre><div class="line">React.createClass(&#123;</div><div class="line">propTypes: &#123;</div><div class="line">// 可以声明 prop 为指定的 JS 基本类型。默认</div><div class="line">        // 情况下，这些 prop 都是可传可不传的。</div><div class="line"></div><div class="line">React.PropTypes.array           // 数组</div><div class="line"></div><div class="line">React.PropTypes.bool.isRequired // Boolean 且必要。</div><div class="line"></div><div class="line">React.PropTypes.func            // 函数</div><div class="line"></div><div class="line">React.PropTypes.number          // 数字</div><div class="line"></div><div class="line">React.PropTypes.object          // 对象</div><div class="line"></div><div class="line">React.PropTypes.string          // 字符串</div><div class="line"></div><div class="line">React.PropTypes.node            // 任何类型的: numbers, strings, elements 或者任何这种类型的数组 节点</div><div class="line"></div><div class="line">React.PropTypes.element         // React 元素</div><div class="line"></div><div class="line">React.PropTypes.instanceOf(XXX) // 某种类型的实例，对象</div><div class="line"></div><div class="line">React.PropTypes.oneOf([&apos;foo&apos;, &apos;bar&apos;]) // 其中一个字串</div><div class="line"></div><div class="line">React.PropTypes.oneOfType([React.PropTypes.string, React.PropTypes.array]) // 其中一格式类型</div><div class="line"></div><div class="line">React.PropTypes.arrayOf(React.PropTypes.string)  // 某种类型的数组(字串类型)，任意一种类型字符串</div><div class="line"></div><div class="line">React.PropTypes.objectOf(React.PropTypes.string) // 任意一种类型的对象(字串类型)</div><div class="line"></div><div class="line">React.PropTypes.shape(&#123;                          // 是否符合指定格式的对象</div><div class="line"></div><div class="line">color: React.PropTypes.string,</div><div class="line">fontSize: React.PropTypes.number</div><div class="line">&#125;);</div><div class="line">React.PropTypes.any.isRequired  // 可以是任何格式，且必要。</div><div class="line"></div><div class="line"></div><div class="line">// 自定义格式(当不符合时，会显示Error)</div><div class="line"></div><div class="line">// 不要用`console.warn` 或者 throw, 因为它在`oneOfType` 的情况下无效。</div><div class="line"></div><div class="line">// 所有可以被渲染的对象：数字，</div><div class="line">        // 字符串，DOM 元素或包含这些类型的数组。</div><div class="line">optionalNode: React.PropTypes.node,</div><div class="line"></div><div class="line">// React 元素</div><div class="line">optionalElement: React.PropTypes.element,</div><div class="line"></div><div class="line">// 用 JS 的 instanceof 操作符声明 prop 为类的实例。</div><div class="line">optionalMessage: React.PropTypes.instanceOf(Message),</div><div class="line"></div><div class="line">// 用 enum 来限制 prop 只接受指定的值。</div><div class="line">optionalEnum: React.PropTypes.oneOf([&apos;News&apos;, &apos;Photos&apos;]),</div><div class="line"></div><div class="line">// 指定的多个对象类型中的一个</div><div class="line">optionalUnion: React.PropTypes.oneOfType([</div><div class="line">            React.PropTypes.string,</div><div class="line">React.PropTypes.number,</div><div class="line">React.PropTypes.instanceOf(Message)</div><div class="line">        ]),</div><div class="line"></div><div class="line">// 指定类型组成的数组</div><div class="line">optionalArrayOf: React.PropTypes.arrayOf(React.PropTypes.number),</div><div class="line"></div><div class="line">// 指定类型的属性构成的对象</div><div class="line">optionalObjectOf: React.PropTypes.objectOf(React.PropTypes.number),</div><div class="line"></div><div class="line">// 特定形状参数的对象</div><div class="line">optionalObjectWithShape: React.PropTypes.shape(&#123;</div><div class="line">color: React.PropTypes.string,</div><div class="line">fontSize: React.PropTypes.number</div><div class="line">&#125;),</div><div class="line"></div><div class="line">// 以后任意类型加上 `isRequired` 来使 prop 不可空。</div><div class="line">requiredFunc: React.PropTypes.func.isRequired,</div><div class="line"></div><div class="line">// 不可空的任意类型</div><div class="line">requiredAny: React.PropTypes.any.isRequired,</div><div class="line"></div><div class="line">// 自定义验证器。如果验证失败需要返回一个 Error 对象。不要直接</div><div class="line">        // 使用 `console.warn` 或抛异常，因为这样 `oneOfType` 会失效。</div><div class="line">customProp: function(props, propName, componentName) &#123;</div><div class="line">if (!/matchme/.test(props[propName])) &#123;</div><div class="line">return new Error(&apos;Validation failed!&apos;);</div><div class="line">&#125;</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">/* ... */</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>下面是项目中应用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">TopBar.propTypes = &#123;</div><div class="line">    handleSubmit: React.PropTypes.func</div><div class="line">&#125;</div><div class="line">module.exports = TopBar;</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[React 组件之间的传值]]></title>
      <url>https://qingege.github.io/2016/07/28/react/react_module/</url>
      <content type="html"><![CDATA[<h3 id="React-父组件和子组件之间的传值"><a href="#React-父组件和子组件之间的传值" class="headerlink" title="React 父组件和子组件之间的传值"></a>React 父组件和子组件之间的传值</h3><h4 id="主要是通过-this-props之间传值"><a href="#主要是通过-this-props之间传值" class="headerlink" title="主要是通过 this.props之间传值"></a>主要是通过 this.props之间传值</h4><p> <em>输出语句:export命令规定的是对外的接口，必须与模块内部的变量建立一一对应关系。<br>使用export命令定义了模块的对外接口以后，其他JS文件就可以通过import命令加载这个模块（文件）。
</em><br><a id="more"></a></p>
<h2 id="index-js"><a href="#index-js" class="headerlink" title="index.js"></a>index.js</h2><h3 id="这是父组件"><a href="#这是父组件" class="headerlink" title="这是父组件"></a>这是父组件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div></pre></td><td class="code"><pre><div class="line">module.exports = &#123;</div><div class="line">    path: &apos;tinymce&apos;,</div><div class="line">breadcrumbName:&quot;redux测试&quot;,</div><div class="line"></div><div class="line">getComponent(nextState, callback) &#123;</div><div class="line">        require.ensure([], (require) =&gt; &#123;</div><div class="line">            callback(null, require(&apos;./components/circle.jsx&apos;))</div><div class="line">        &#125;)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">circle.jsx</div><div class="line">import React,&#123;Component&#125; from &apos;react&apos;;</div><div class="line">import ReactDom from &apos;react-dom&apos;;</div><div class="line">import Newout from &apos;./NewOUtSide.js&apos;</div><div class="line">class test extends Component&#123;</div><div class="line">constructor(props)&#123;</div><div class="line">//构造方法</div><div class="line">super(props);</div><div class="line">this.state=&#123;</div><div class="line">dataname:&apos;属性了，一个基本的属性&apos;,</div><div class="line">newtestname:&apos;&apos;,</div><div class="line">newreftest:&apos;&apos;,</div><div class="line">isTrue:&apos;你去给我买好吃的去&apos;,</div><div class="line">isout:&apos;我是外面的&apos;</div><div class="line">&#125;</div><div class="line">//点击事件</div><div class="line">this.onSubmit=this.onSubmit.bind(this);</div><div class="line">//实时传递数据</div><div class="line">this.newtest=this.newtest.bind(this);</div><div class="line">//实时传递数据</div><div class="line">this.reftest=this.reftest.bind(this);</div><div class="line">//组件之间传值</div><div class="line">this.newContent=this.newContent.bind(this);</div><div class="line">//这是外面传值</div><div class="line">this.outContent=this.outContent.bind(this);</div><div class="line">&#125;;</div><div class="line">//加载就执行</div><div class="line">componentDidMount()&#123;</div><div class="line">this.setState(&#123;</div><div class="line">name:&apos;我是加载就执行的name，我是react一个方法&apos;</div><div class="line">&#125;)</div><div class="line">  &#125;</div><div class="line">//点击事件</div><div class="line">onSubmit()&#123;</div><div class="line"></div><div class="line">this.setState(&#123;</div><div class="line">dataname:&apos;我是修改之后的属性&apos;</div><div class="line">&#125;)</div><div class="line">  &#125;</div><div class="line">//修改input</div><div class="line">newtest(value)&#123;</div><div class="line"></div><div class="line">this.setState(&#123;</div><div class="line">newtestname:value.target.value</div><div class="line">    &#125;)</div><div class="line"></div><div class="line">  &#125;</div><div class="line">//修改input的内容</div><div class="line">reftest(value)&#123;</div><div class="line">this.state.newreftest=ReactDom.findDOMNode(this.refs.inputname).value;</div><div class="line">this.forceUpdate();</div><div class="line"></div><div class="line">&#125;</div><div class="line">//修改组件的值</div><div class="line">newContent(value)&#123;</div><div class="line">this.setState(&#123;</div><div class="line">iszi:value</div><div class="line">    &#125;)</div><div class="line"></div><div class="line">  &#125;</div><div class="line">//外面传递的值</div><div class="line">outContent(value)&#123;</div><div class="line">this.setState(&#123;</div><div class="line">isoutzi:value</div><div class="line">    &#125;)</div><div class="line">  &#125;</div><div class="line">render()&#123;</div><div class="line">return (</div><div class="line">&lt;div&gt;</div><div class="line">这是个测试:</div><div class="line">        &#123;this.state.dataname&#125;，</div><div class="line">&lt;h4&gt;这是一个componentDidMount的方法：&lt;/h4&gt;&#123;this.state.name&#125;</div><div class="line">&lt;h3&gt;这是一个按钮：&lt;/h3&gt;</div><div class="line">            &lt;button type=&quot;primary&quot; htmlType=&quot;submit&quot; ref=&quot;submit&quot; onClick=&#123;this.onSubmit&#125;&gt;点击&lt;/button&gt;</div><div class="line">            &lt;h3&gt;实时传值&lt;/h3&gt;</div><div class="line">            &lt;input type=&quot;test&quot; onChange=&#123;this.newtest&#125; /&gt;</div><div class="line">            &lt;span&gt;&#123;this.state.newtestname&#125;&lt;/span&gt;</div><div class="line">              &lt;input type=&quot;test&quot; ref=&quot;inputname&quot; onChange=&#123;this.reftest&#125; /&gt;</div><div class="line">            &lt;span style=&#123;&#123;color:&apos;red&apos;&#125;&#125;&gt;&#123;this.state.newreftest&#125;&lt;/span&gt;</div><div class="line">            &lt;span&gt;这是同页面之间传值：&lt;/span&gt;</div><div class="line">              &lt;NewModuleTest isAll=&#123;this.state.isTrue&#125; cdContent=&#123;this.newContent&#125; /&gt;</div><div class="line">              &lt;h5&gt;这是子组件给我传递的值：&#123;this.state.iszi&#125;&lt;/h5&gt;</div><div class="line">            &lt;span&gt;这是从外面传值&lt;/span&gt;</div><div class="line">            &lt;Newout isOutAll=&#123;this.state.isout&#125; isOutContet=&#123;this.outContent&#125; /&gt;</div><div class="line">            &lt;span&gt;这是外面给传递的值：&#123;this.state.isoutzi&#125;&lt;/span&gt;</div><div class="line">      &lt;/div&gt;</div><div class="line">)</div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="这是子组件"><a href="#这是子组件" class="headerlink" title="这是子组件"></a>这是子组件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">class NewModuleTest extends Component&#123;</div><div class="line">constructor(props)&#123;</div><div class="line">super(props);</div><div class="line">this.state=&#123;</div><div class="line">isnew:&apos;&apos;,</div><div class="line">isdata:&apos;我没有钱，没法给你买东西&apos;</div><div class="line">&#125;</div><div class="line"></div><div class="line">   &#125;</div><div class="line">componentDidMount()&#123;</div><div class="line">this.setState(&#123;</div><div class="line">isnew:this.props.isAll</div><div class="line">&#125;);</div><div class="line">setTimeout(()=&gt;&#123;</div><div class="line">this.props.cdContent(this.state.isdata)</div><div class="line">    &#125;,100)</div><div class="line"></div><div class="line">   &#125;</div><div class="line">render()&#123;</div><div class="line">return (</div><div class="line">&lt;div&gt;</div><div class="line">            &lt;h1&gt;我是子组件，我在同一个页中实现的，我要给父组件传值&lt;/h1&gt;</div><div class="line">            &lt;h3&gt;我是父组件传给我值：&#123;this.state.isnew&#125;&lt;/h3&gt;</div><div class="line"></div><div class="line">       &lt;/div&gt;</div><div class="line">)</div><div class="line">   &#125;</div><div class="line"></div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<h3 id="这是模块之前的传值方式"><a href="#这是模块之前的传值方式" class="headerlink" title="这是模块之前的传值方式"></a>这是模块之前的传值方式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">//模块输出</div><div class="line">module.exports=test;</div><div class="line">NewOUtSide.js</div><div class="line">import React,&#123;Component&#125; from &apos;react&apos;;</div><div class="line">import ReactDom from &apos;react-dom&apos;;</div><div class="line"></div><div class="line">class OutSide extends Component&#123;</div><div class="line">constructor(props)&#123;</div><div class="line">super(props);</div><div class="line">this.state=&#123;</div><div class="line">isout:&apos;&apos;,</div><div class="line">outlist:&quot;我是外面给父组件传递值&quot;</div><div class="line">&#125;</div><div class="line">  &#125;</div><div class="line">componentDidMount()&#123;</div><div class="line">this.setState(&#123;</div><div class="line">isout:this.props.isOutAll</div><div class="line">&#125;);</div><div class="line">setTimeout(()=&gt;&#123;this.props.isOutContet(this.state.outlist)&#125;,100)</div><div class="line"></div><div class="line"></div><div class="line">  &#125;</div><div class="line">render()&#123;</div><div class="line">return(</div><div class="line">&lt;div&gt;</div><div class="line">          &lt;h3&gt;这是外面的组件：&#123;this.state.isout&#125;&lt;/h3&gt;</div><div class="line">      &lt;/div&gt;</div><div class="line">)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">module.exports=OutSide;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[react.js 组件之间state数据的传值]]></title>
      <url>https://qingege.github.io/2016/07/28/react/react_data/</url>
      <content type="html"><![CDATA[<h2 id="React-cloneElement"><a href="#React-cloneElement" class="headerlink" title="React.cloneElement"></a>React.cloneElement</h2><p>参数：TYPE（ReactElement），[PROPS（object）]，[CHILDREN（ReactElement）]<br>克隆并返回一个新的 ReactElement （内部子元素也会跟着克隆），<br>新返回的元素会保留有旧元素的 props、ref、key，也会集成新的 props（只要在第二个参数中有定义）。</p>
<p>通过React.cloneElement实现props数据之间的传值</p>
<h4 id="在父的组件中，将两个子组件的data传递出来"><a href="#在父的组件中，将两个子组件的data传递出来" class="headerlink" title="在父的组件中，将两个子组件的data传递出来"></a>在父的组件中，将两个子组件的data传递出来</h4> <a id="more"></a>
<p> 首先父组件定义header和main两个组件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">class Circle extends Component &#123;</div><div class="line">    constructor(props)&#123;</div><div class="line">        super(props);</div><div class="line">    &#125;</div><div class="line">    render() &#123;</div><div class="line">       let &#123; header, main &#125; = this.props</div><div class="line">       //此处非不得以判断层级，进而达到底层面板不展示的方式。理论上应该是有其他方式，去设置父组件属性。</div><div class="line">      content = ( &lt;div className=&quot;content_group&quot;&gt;</div><div class="line">           &#123;(!!header) ? (&lt;div className=&quot;content_header&quot;&gt;</div><div class="line">               &#123;header &amp;&amp; React.cloneElement(header, &#123;brodcast: (message)=&gt;main.props.getNotify(message)&#125;)&#125;</div><div class="line">           &lt;/div&gt;) : &quot;&quot;&#125;</div><div class="line">           &#123;(!!main) ? (&lt;div className=&quot;content_main&quot;&gt;&#123;main&#125;&lt;/div&gt;) : &quot;&quot;&#125;</div><div class="line">         </div><div class="line">       &lt;/div&gt;</div><div class="line">       ）</div><div class="line">                       </div><div class="line">               return (</div><div class="line">                   &lt;div&gt;</div><div class="line">                           &#123;content&#125;</div><div class="line">                   &lt;/div&gt;</div><div class="line">               )</div><div class="line">       </div><div class="line">&#125;</div><div class="line"></div><div class="line">module.exports = Circle;</div></pre></td></tr></table></figure></p>
<h3 id="在header-jsx-中赋值。在center-jsx中拿值"><a href="#在header-jsx-中赋值。在center-jsx中拿值" class="headerlink" title="在header.jsx 中赋值。在center.jsx中拿值"></a>在header.jsx 中赋值。在center.jsx中拿值</h3><h4 id="header-jsx"><a href="#header-jsx" class="headerlink" title="header.jsx"></a>header.jsx</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">class header extends Component &#123;</div><div class="line">    constructor(props) &#123;</div><div class="line">            super(props);</div><div class="line">             this.handleSubmit = this.handleSubmit.bind(this);</div><div class="line">            this.state = &#123;</div><div class="line">                circleID: &quot;1&quot;,</div><div class="line">                begin_time: &quot;2015.01.01&quot;,</div><div class="line">                title: &quot;内容&quot;,</div><div class="line">            &#125;;</div><div class="line">       &#125;</div><div class="line">       handleSubmit()&#123;</div><div class="line">          let Data = this.state;</div><div class="line">          this.props.brodcast(Data);</div><div class="line">       &#125;</div><div class="line">    render()&#123;</div><div class="line">        return(</div><div class="line">            &lt;a onClick=&#123;this.handleSubmit&#125;&gt;搜索&lt;/a&gt;</div><div class="line">        )</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">module.exports = header;</div></pre></td></tr></table></figure>
<p>###上面通过父组件中的this.props.brodcast()将值传入，在content.jsx接受值</p>
<h4 id="content-jsx"><a href="#content-jsx" class="headerlink" title="content.jsx"></a>content.jsx</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">var faThis = null;</div><div class="line">  class content extends Component &#123;</div><div class="line">      constructor(props) &#123;</div><div class="line">              super(props);</div><div class="line">            faThis = setTimeout(()=&gt; &#123;</div><div class="line">                faThis = this;</div><div class="line">                &#125;);</div><div class="line">              this.state = &#123;</div><div class="line">                  newdata: [],</div><div class="line">              &#125;;</div><div class="line">         &#125;</div><div class="line">         //获取传递过来的请求参数</div><div class="line">             getNotify(data) &#123;</div><div class="line">                 //将参数传递给后台。</div><div class="line">                 faThis.state.newdata = data;</div><div class="line">                faThis.forceUpdate();</div><div class="line">             &#125;</div><div class="line">      render()&#123;</div><div class="line">          return(</div><div class="line">              &lt;span&gt;&#123;this.state.newdata.title&#125;&lt;span&gt;</div><div class="line">          )</div><div class="line">      &#125;</div><div class="line">  &#125;</div><div class="line">  content.defaultProps = &#123;</div><div class="line">      getNotify: content.prototype.getNotify</div><div class="line">  &#125;;</div><div class="line">  module.exports = content;</div></pre></td></tr></table></figure>
<p>实现了 data之前传值，其中重新定义this为faThis是为了防止跟自身组件冲突。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[React.js  WebPack  Babel ES6 React-router Redux 项目搭建]]></title>
      <url>https://qingege.github.io/2016/07/28/react/react_creation/</url>
      <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">下面来详细介绍一下</div><div class="line"> React.js  WebPack  Babel ES6 React-router Redux 项目搭建</div></pre></td></tr></table></figure>
<h1 id="1-创建项目"><a href="#1-创建项目" class="headerlink" title="1 创建项目"></a>1 创建项目</h1><p>首先 搭建一个这样的结构</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">--your project</div><div class="line">  |--app</div><div class="line">    |--components</div><div class="line">      |--productBox.jsx</div><div class="line">    |--main.js</div><div class="line">  |--build</div><div class="line">    |--index.html</div><div class="line">    |--bundle.js(该文件是webpack打包后生成的)</div></pre></td></tr></table></figure>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">下面来详细介绍一下</div><div class="line"> React.js  WebPack  Babel ES6 React-router Redux 项目搭建</div></pre></td></tr></table></figure>
<h1 id="1-创建项目-1"><a href="#1-创建项目-1" class="headerlink" title="1 创建项目"></a>1 创建项目</h1><p>首先 搭建一个这样的结构</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">--your project</div><div class="line">  |--app</div><div class="line">    |--components</div><div class="line">      |--productBox.jsx</div><div class="line">    |--main.js</div><div class="line">  |--build</div><div class="line">    |--index.html</div><div class="line">    |--bundle.js(该文件是webpack打包后生成的)</div></pre></td></tr></table></figure>
<h3 id="（1）-创建package-json"><a href="#（1）-创建package-json" class="headerlink" title="（1） 创建package.json"></a>（1） 创建package.json</h3><pre><code>npm init    
帮助我们跟踪节点模块
</code></pre><h3 id="（2）-安装react和react-DOM"><a href="#（2）-安装react和react-DOM" class="headerlink" title="（2） 安装react和react DOM"></a>（2） 安装react和react DOM</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">npm install react --save-dev</div><div class="line">或者是 npm install --save-dev react@5.10.0</div><div class="line">npm install react-dom --save-dev</div></pre></td></tr></table></figure>
<h3 id="3-安装webpack和webpack-dev-server"><a href="#3-安装webpack和webpack-dev-server" class="headerlink" title="(3) 安装webpack和webpack-dev-server"></a>(3) 安装webpack和webpack-dev-server</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">需要注意的是 webpack-dev-server 为服务器需要装全局的</div><div class="line">npm install webpack --save-dev</div><div class="line">npm install webpack-dev-server -g</div></pre></td></tr></table></figure>
<h3 id="（4）安装babel-loader-和下面几个组件"><a href="#（4）安装babel-loader-和下面几个组件" class="headerlink" title="（4）安装babel-loader 和下面几个组件"></a>（4）安装babel-loader 和下面几个组件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">npm install babel-loader --save-dev</div><div class="line">npm install babel-core --save-dev</div><div class="line">npm install babel-preset-es2015 --save-dev //支持ES2015</div><div class="line">npm install babel-preset-react --save-dev //支持jsx</div></pre></td></tr></table></figure>
<h4 id="5-在文件夹app下创建hello-jsx"><a href="#5-在文件夹app下创建hello-jsx" class="headerlink" title="(5) 在文件夹app下创建hello.jsx"></a>(5) 在文件夹app下创建hello.jsx</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">首先创建自己的第一组件，当你创建一个组件，您定义所有这些通过重写的反应，组件来呈现功能</div><div class="line">在hello.jsx中输入：</div><div class="line">import React from &apos;react&apos;;</div><div class="line">class Hello extends React.Component&#123;</div><div class="line">    render()&#123;</div><div class="line">    return &lt;h1&gt;你好&lt;/h1&gt;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">需要注意的是：我们运用的是ES6语法，可以使我们的代码不用写React.createClass更加简洁。</div><div class="line">下面的代码是不用ES6和JSX的代码</div><div class="line">var React =require(&apos;react&apos;);</div><div class="line">var Hello =React.createClass(&#123;</div><div class="line">    displayName:&apos;Hello&apos;,</div><div class="line">    render:function()&#123;</div><div class="line">    return React.createElement(&quot;h1&quot;,null,&quot;Hello&quot;);</div><div class="line">&#125;</div><div class="line">&#125;);</div><div class="line">当我们使用JSX时,我们可以更简练地定义虚拟DOM元素,而无需调用反应。createElement和通过哪些属性的元素。我们简单的你好组件可能有相同数量的行代码但JSX使事情更容易,继续构建组件和结合在一起。所以我们不用这种方式了</div></pre></td></tr></table></figure>
<h3 id="（6）引入DOM的渲染功能，传递一个组件对象来连接一个实际的DOM元素"><a href="#（6）引入DOM的渲染功能，传递一个组件对象来连接一个实际的DOM元素" class="headerlink" title="（6）引入DOM的渲染功能，传递一个组件对象来连接一个实际的DOM元素"></a>（6）引入DOM的渲染功能，传递一个组件对象来连接一个实际的DOM元素</h3> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">import React from &apos;react&apos;;</div><div class="line">import ReactDOM from &apos;react-dom&apos;;</div><div class="line">   class Hello extends React.Component&#123;</div><div class="line">    render()&#123;</div><div class="line">    return &lt;h1&gt;你好&lt;/h1&gt;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">ReactDOM.render(&lt;Hello/&gt;,document.getElementById(&apos;hello&apos;));</div></pre></td></tr></table></figure>
<h3 id="（7）同样的方式早app文件夹下添加world-jsx组件"><a href="#（7）同样的方式早app文件夹下添加world-jsx组件" class="headerlink" title="（7）同样的方式早app文件夹下添加world.jsx组件"></a>（7）同样的方式早app文件夹下添加world.jsx组件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">import React from &apos;react&apos;;</div><div class="line">import ReactDOM from &apos;react-dom&apos;;</div><div class="line"></div><div class="line">class World extends React.Component &#123;</div><div class="line">  render() &#123;</div><div class="line">    return &lt;h1&gt;World&lt;/h1&gt;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">ReactDOM.render(&lt;World/&gt;, document.getElementById(&apos;world&apos;));</div><div class="line">//调用html中的id=&quot;world&quot;。对应的是World组件</div></pre></td></tr></table></figure>
<h3 id="（8）在build-文件夹下的index-html中添加如下代码"><a href="#（8）在build-文件夹下的index-html中添加如下代码" class="headerlink" title="（8）在build 文件夹下的index.html中添加如下代码:"></a>（8）在build 文件夹下的index.html中添加如下代码:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;!doctype html&gt;</div><div class="line">&lt;html&gt;</div><div class="line"> &lt;head&gt;</div><div class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class="line">  &lt;title&gt;Hello React&lt;/title&gt;</div><div class="line"> &lt;/head&gt;</div><div class="line"> &lt;body&gt;</div><div class="line">  &lt;div id=&quot;hello&quot;&gt;&lt;/div&gt;</div><div class="line">  &lt;div id=&quot;world&quot;&gt;&lt;/div&gt;</div><div class="line"> &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<h3 id="9-在app文件夹下的main-js添加如下代码"><a href="#9-在app文件夹下的main-js添加如下代码" class="headerlink" title="(9) 在app文件夹下的main.js添加如下代码"></a>(9) 在app文件夹下的main.js添加如下代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">作用是：导入这两个反应组件。</div><div class="line">import Hello from&apos;./hello.jsx&apos;;</div><div class="line">import World from&apos;./world.jsx&apos;;</div></pre></td></tr></table></figure>
<h3 id="（10）我们需要告诉Webpack-这将是我们的入口点和加载器使用在创建包。"><a href="#（10）我们需要告诉Webpack-这将是我们的入口点和加载器使用在创建包。" class="headerlink" title="（10）我们需要告诉Webpack,这将是我们的入口点和加载器使用在创建包。"></a>（10）我们需要告诉Webpack,这将是我们的入口点和加载器使用在创建包。</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">在项目目录下创建webpack.config.js</div><div class="line">varpath=require(&apos;path&apos;);</div><div class="line">varwebpack=require(&apos;webpack&apos;);</div><div class="line"></div><div class="line">module.exports=&#123;</div><div class="line"> entry:path.resolve(__dirname, &apos;./app/main.js&apos;),</div><div class="line"> output:&#123;</div><div class="line">     path:path.resolve(__dirname, &apos;./build&apos;),</div><div class="line">filename:&apos;bundle.js&apos;&#125;,</div><div class="line"> module:&#123;</div><div class="line">   loaders:[</div><div class="line">      &#123;</div><div class="line">        test:/.jsx?$/,// 用正则来匹配文件路径，这段意思是匹配 js 或者 jsx</div><div class="line">        loader:&apos;babel-loader&apos;,</div><div class="line">        exclude:/node_modules/,</div><div class="line">        query:&#123;</div><div class="line">          presets:[&apos;es2015&apos;,&apos;react&apos;]</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    ]</div><div class="line"> &#125;,</div><div class="line">&#125;;</div><div class="line">其中entry指定了webpack的入口程序，好比c++和java中的main程序一样，我们把最终要插入到页面指定位置的react模板写入main.js中。</div><div class="line"></div><div class="line">而output则指定了webpack打包成功之后文件名称以及文件的存放位置。</div></pre></td></tr></table></figure>
<h3 id="（11）我们需要在html中添加bundle-js-依照之前指定的项目结构，我们可以在index-html中直接引入打包生成的bundle-js"><a href="#（11）我们需要在html中添加bundle-js-依照之前指定的项目结构，我们可以在index-html中直接引入打包生成的bundle-js" class="headerlink" title="（11）我们需要在html中添加bundle.js.依照之前指定的项目结构，我们可以在index.html中直接引入打包生成的bundle.js"></a>（11）我们需要在html中添加bundle.js.依照之前指定的项目结构，我们可以在index.html中直接引入打包生成的bundle.js</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;!doctype html&gt;</div><div class="line">&lt;html&gt;</div><div class="line"> &lt;head&gt;</div><div class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class="line">  &lt;title&gt;Hello React&lt;/title&gt;</div><div class="line"> &lt;/head&gt;</div><div class="line"> &lt;body&gt;</div><div class="line">  &lt;div id=&quot;hello&quot;&gt;&lt;/div&gt;</div><div class="line">  &lt;div id=&quot;world&quot;&gt;&lt;/div&gt;</div><div class="line">  &lt;script src=&quot;bundle.js&quot;&gt;&lt;/script&gt;</div><div class="line"> &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<h3 id="（12）使用webpack-dev-server：监听代码自动刷新！"><a href="#（12）使用webpack-dev-server：监听代码自动刷新！" class="headerlink" title="（12）使用webpack-dev-server：监听代码自动刷新！"></a>（12）使用webpack-dev-server：监听代码自动刷新！</h3><h4 id="（12-1、在控制台上输入"><a href="#（12-1、在控制台上输入" class="headerlink" title="（12.1、在控制台上输入"></a>（12.1、在控制台上输入</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">npm install webpack-dev-server --save-dev</div><div class="line">npm install --save-dev react-hot-loader //热加载</div><div class="line"></div><div class="line">我们先打开package.json，并找到scripts代码块。在没引入webpack-dev-server之前，我们运行这个项目的姿势是这样的</div><div class="line">&quot;scripts&quot;: &#123;</div><div class="line">        &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;,</div><div class="line">        &quot;build&quot;: &quot;webpack&quot;</div><div class="line">&#125;</div><div class="line">并且执行：</div><div class="line">npm run build</div></pre></td></tr></table></figure>
<h4 id="（12-2）项目就跑起来啦，但是每次修改程序我们都要手动输入npm-run-build来跑项目，这无疑是一件非常蛋疼的事情。但有了webpack-dev-server光环，我们的姿势应该是这样的："><a href="#（12-2）项目就跑起来啦，但是每次修改程序我们都要手动输入npm-run-build来跑项目，这无疑是一件非常蛋疼的事情。但有了webpack-dev-server光环，我们的姿势应该是这样的：" class="headerlink" title="（12.2）项目就跑起来啦，但是每次修改程序我们都要手动输入npm run build来跑项目，这无疑是一件非常蛋疼的事情。但有了webpack-dev-server光环，我们的姿势应该是这样的："></a>（12.2）项目就跑起来啦，但是每次修改程序我们都要手动输入npm run build来跑项目，这无疑是一件非常蛋疼的事情。但有了webpack-dev-server光环，我们的姿势应该是这样的：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">为scripts添加</div><div class="line">&quot;scripts&quot;: &#123;</div><div class="line"></div><div class="line">        &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;,</div><div class="line">        &quot;build&quot;: &quot;webpack&quot;,</div><div class="line">          &quot;dev&quot;: &quot;webpack-dev-server --devtool eval --progress --colors --hot --content-base build&quot;</div><div class="line">&#125;</div><div class="line">    ps：dev里各属性值的意思是：</div><div class="line">    1.  webpack-dev-server: 在 localhost:8080 建立一个 Web 服务器</div><div class="line">    2.  --devtool eval:为你的代码创建源地址。当有任何报错的时候可以让你更加精确地定位到文件和行号</div><div class="line">    3.  --progress: 显示合并代码进度</div><div class="line">    4.  --colors: 在命令行中显示颜色</div><div class="line">    5.  --content-base build:指向设置的输出目录</div></pre></td></tr></table></figure>
<h4 id="（12-3）并且在index-html里加入：build-index-html"><a href="#（12-3）并且在index-html里加入：build-index-html" class="headerlink" title="（12.3）并且在index.html里加入：build/index.html"></a>（12.3）并且在index.html里加入：build/index.html</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head lang=&quot;en&quot;&gt;</div><div class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class="line">&lt;title&gt;hello react&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;div id=&quot;hello&quot;&gt;&lt;/div&gt;</div><div class="line">&lt;div id=&quot;world&quot;&gt;&lt;/div&gt;</div><div class="line">&lt;script src=&quot;http://localhost:8080/webpack-dev-server.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;script src=&quot;bundle.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<h4 id="（12-4）在webpack-config-js的入口处加入："><a href="#（12-4）在webpack-config-js的入口处加入：" class="headerlink" title="（12.4）在webpack.config.js的入口处加入："></a>（12.4）在webpack.config.js的入口处加入：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">var path=require(&apos;path&apos;);</div><div class="line">var webpack =require(&apos;webpack&apos;);</div><div class="line">module.exports=&#123;</div><div class="line"> entry:[&apos;webpack/hot/dev-server&apos;,</div><div class="line">        &apos;webpack-dev-server/client?http://localhost:8080&apos;,</div><div class="line">        path.resolve(__dirname, &apos;./app/main.js&apos;)],</div><div class="line">output:&#123;</div><div class="line">path: path.resolve(__dirname, &apos;./build&apos;),</div><div class="line">filename:&apos;bundle.js&apos;</div><div class="line">&#125;,</div><div class="line">module:&#123;</div><div class="line">loaders:[&#123;</div><div class="line">test:/.jsx?$/,</div><div class="line">loader:&apos;babel-loader&apos;,</div><div class="line">exclude:/node_modules/,</div><div class="line">query:&#123;</div><div class="line">                presets:[&apos;es2015&apos;,&apos;react&apos;]</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        ]</div><div class="line">    &#125;,</div><div class="line">plugins: [</div><div class="line">new webpack.DefinePlugin(&#123;</div><div class="line">        &apos;process.env.NODE_ENV&apos;: &apos;&quot;development&quot;&apos;</div><div class="line">    &#125;),</div><div class="line">new webpack.HotModuleReplacementPlugin()</div><div class="line">]</div><div class="line">&#125;;</div><div class="line">最后执行：</div><div class="line">npm run dev</div><div class="line">在浏览器中打开localhost：8080</div><div class="line"></div><div class="line"></div><div class="line">修改端口为8090</div><div class="line">&quot;dev&quot;: &quot;webpack-dev-server --devtool eval --port 8090 --progress --colors --hot --content-base build&quot;</div><div class="line">开发环境</div><div class="line">&quot;compile&quot;: &quot;webpack -p --progress --colors --config webpack.production.config.js&quot;,</div></pre></td></tr></table></figure>
<p>添加本文件，开发js<br><img src="http://o6znw17tt.bkt.clouddn.com/clipboard.png" alt="image"></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div></pre></td><td class="code"><pre><div class="line">var path=require(&apos;path&apos;);</div><div class="line">var webpack =require(&apos;webpack&apos;);</div><div class="line">var CommonsChunkPlugin = require(&quot;webpack/lib/optimize/CommonsChunkPlugin&quot;);</div><div class="line">module.exports=&#123;</div><div class="line">resolve:&#123;</div><div class="line">root:[</div><div class="line">path.resolve(&apos;./app/_global/components&apos;)</div><div class="line">        ],</div><div class="line">extensions:[&apos;&apos;,&apos;.js&apos;,&apos;.jsx&apos;]</div><div class="line">    &#125;,</div><div class="line">entry:[</div><div class="line">path.resolve(__dirname, &apos;./app/main.js&apos;)</div><div class="line">    ],</div><div class="line">output:&#123;</div><div class="line">path: __dirname + &apos;/build&apos;,</div><div class="line">filename: &apos;bundle.js&apos;,</div><div class="line">chunkFilename: &apos;[id].chunk.js&apos;</div><div class="line">&#125;,</div><div class="line">module:&#123;</div><div class="line">loaders:[&#123;</div><div class="line">test:/.jsx?$/,</div><div class="line">loader:&apos;babel-loader&apos;,</div><div class="line">exclude:/node_modules/,</div><div class="line">query:&#123;</div><div class="line">presets:[&apos;es2015&apos;,&apos;react&apos;]</div><div class="line">            &#125;</div><div class="line">        &#125;,</div><div class="line">&#123;test: /\.css$/, loader: &apos;style!css&apos;&#125;,</div><div class="line">&#123;test: /\.scss$/, loader: &quot;style!css!sass&quot;&#125;,</div><div class="line">&#123;test: /\.less$/,loader: &apos;style!css!less&apos;&#125;,</div><div class="line">&#123;test: /\.(png|jpg)$/, loader: &apos;url?limit=25000&apos;&#125;</div><div class="line"></div><div class="line"></div><div class="line">        ]</div><div class="line">    &#125;,</div><div class="line">plugins: [</div><div class="line">new webpack.DefinePlugin(&#123;</div><div class="line">&apos;process.env.NODE_ENV&apos;: &apos;&quot;development&quot;&apos;</div><div class="line">&#125;),</div><div class="line">new webpack.HotModuleReplacementPlugin()</div><div class="line">    ]</div><div class="line">&#125;;</div><div class="line"></div><div class="line">开发环境发布时执行命令 npm run compile</div><div class="line">然后将build里面的东西放在服务器上</div><div class="line"></div><div class="line">package.json</div><div class="line">&#123;</div><div class="line">&quot;name&quot;: &quot;pack_react3&quot;,</div><div class="line">&quot;version&quot;: &quot;1.0.0&quot;,</div><div class="line">&quot;description&quot;: &quot;&quot;,</div><div class="line">&quot;main&quot;: &quot;index.js&quot;,</div><div class="line">&quot;scripts&quot;: &#123;</div><div class="line">&quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;,</div><div class="line">&quot;build&quot;: &quot;webpack&quot;,</div><div class="line">&quot;compile&quot;: &quot;webpack -p --progress --colors --config webpack.production.config.js&quot;,</div><div class="line">&quot;dev&quot;: &quot;webpack-dev-server --devtool eval --port 8090 --progress --colors --hot --content-base build&quot;</div><div class="line">&#125;,</div><div class="line">&quot;author&quot;: &quot;&quot;,</div><div class="line">&quot;license&quot;: &quot;ISC&quot;,</div><div class="line">&quot;devDependencies&quot;: &#123;</div><div class="line">&quot;babel-core&quot;: &quot;^6.7.4&quot;,</div><div class="line">&quot;babel-loader&quot;: &quot;^6.2.4&quot;,</div><div class="line">&quot;babel-preset-es2015&quot;: &quot;^6.6.0&quot;,</div><div class="line">&quot;babel-preset-react&quot;: &quot;^6.5.0&quot;,</div><div class="line">&quot;css-loader&quot;: &quot;^0.23.1&quot;,</div><div class="line">&quot;file-loader&quot;: &quot;^0.8.5&quot;,</div><div class="line">&quot;less&quot;: &quot;^2.6.1&quot;,</div><div class="line">&quot;less-loader&quot;: &quot;^2.2.3&quot;,</div><div class="line">&quot;react&quot;: &quot;^0.14.8&quot;,</div><div class="line">&quot;react-dom&quot;: &quot;^0.14.8&quot;,</div><div class="line">&quot;react-hot-loader&quot;: &quot;^1.3.0&quot;,</div><div class="line">&quot;reqwest&quot;: &quot;^2.0.5&quot;,</div><div class="line">&quot;style-loader&quot;: &quot;^0.13.1&quot;,</div><div class="line">&quot;url-loader&quot;: &quot;^0.5.7&quot;,</div><div class="line">&quot;webpack&quot;: &quot;^1.12.14&quot;,</div><div class="line">&quot;webpack-dev-server&quot;: &quot;^1.14.1&quot;</div><div class="line">&#125;,</div><div class="line">&quot;dependencies&quot;: &#123;</div><div class="line">&quot;antd&quot;: &quot;^0.12.13&quot;,</div><div class="line">&quot;babel-preset-react&quot;: &quot;^6.5.0&quot;,</div><div class="line">&quot;rc-select&quot;: &quot;^6.0.6&quot;,</div><div class="line">&quot;react&quot;: &quot;^0.14.8&quot;,</div><div class="line">&quot;react-dom&quot;: &quot;^0.14.8&quot;,</div><div class="line">&quot;react-router&quot;: &quot;^2.2.2&quot;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="webpack-config-js"><a href="#webpack-config-js" class="headerlink" title="webpack.config.js"></a>webpack.config.js</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">var path=require(&apos;path&apos;);</div><div class="line">var webpack =require(&apos;webpack&apos;);</div><div class="line"></div><div class="line">module.exports=&#123;</div><div class="line">resolve:&#123;</div><div class="line">root:[</div><div class="line">            path.resolve(&apos;./app/_global/components&apos;)</div><div class="line">        ],</div><div class="line">extensions:[&apos;&apos;,&apos;.js&apos;,&apos;.jsx&apos;]</div><div class="line">    &#125;,</div><div class="line">entry:[&apos;webpack/hot/dev-server&apos;,</div><div class="line">&apos;webpack-dev-server/client?http://localhost:8090&apos;,</div><div class="line">path.resolve(__dirname, &apos;./app/main.js&apos;)],</div><div class="line">output:&#123;</div><div class="line">//path: path.resolve(__dirname, &apos;build/bundles&apos;),</div><div class="line">        //filename:&apos;bundle.js&apos;</div><div class="line">path: __dirname + &apos;/build&apos;,</div><div class="line">filename: &apos;bundle.js&apos;,</div><div class="line">chunkFilename: &apos;[id].chunk.js&apos;</div><div class="line">&#125;,</div><div class="line">module:&#123;</div><div class="line">loaders:[&#123;</div><div class="line">test:/.jsx?$/,</div><div class="line">loader:&apos;babel-loader&apos;,</div><div class="line">exclude:/node_modules/,</div><div class="line">query:&#123;</div><div class="line">presets:[&apos;es2015&apos;,&apos;react&apos;]</div><div class="line">            &#125;</div><div class="line">        &#125;,</div><div class="line">&#123;test: /\.css$/, loader: &apos;style!css&apos;&#125;,</div><div class="line">&#123;test: /\.scss$/, loader: &quot;style!css!sass&quot;&#125;,</div><div class="line">&#123;test: /\.less$/,loader: &apos;style!css!less&apos;&#125;,</div><div class="line">&#123;test: /\.(png|jpg)$/, loader: &apos;url?limit=25000&apos;&#125;</div><div class="line"></div><div class="line"></div><div class="line">        ]</div><div class="line">    &#125;,</div><div class="line">plugins: [</div><div class="line">new webpack.DefinePlugin(&#123;</div><div class="line">&apos;process.env.NODE_ENV&apos;: &apos;&quot;development&quot;&apos;</div><div class="line">&#125;),</div><div class="line">new webpack.HotModuleReplacementPlugin()</div><div class="line">]</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="创建路由"><a href="#创建路由" class="headerlink" title="创建路由"></a>创建路由</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">在webpack.config.js中输入</div><div class="line">resolve:&#123;</div><div class="line">root:[</div><div class="line">        path.resolve(&apos;./app/_global/components&apos;) //这个是根目录，进来之后先去找这个</div><div class="line">    ],</div><div class="line">extensions:[&apos;&apos;,&apos;.js&apos;,&apos;.jsx&apos;]//拓展，以后带有&apos;&apos;,&apos;.js&apos;,&apos;.jsx&apos;可以省略不写，如：dome.js 可以写成dome</div><div class="line">&#125;,</div><div class="line">在目录下面创建下面的地址</div><div class="line"></div><div class="line">在customComponents.js中调用写的默认模板</div><div class="line">import React from &apos;react&apos;;</div><div class="line">require(&apos;customComponents/customComponents.css&apos;) ;//引用customConponents文件中的css样式，其实这里省略了root中的./app/_global/components</div><div class="line">import NavBox from &apos;customComponents/NavBox.js&apos;//定义默认模块</div><div class="line">module.exports=&#123;NavBox&#125;//模块输出，输出默认模块</div></pre></td></tr></table></figure>
<h2 id="路由搭建逻辑："><a href="#路由搭建逻辑：" class="headerlink" title="路由搭建逻辑："></a>路由搭建逻辑：</h2><h3 id="1-首先创建子路由"><a href="#1-首先创建子路由" class="headerlink" title="1 首先创建子路由"></a>1 首先创建子路由</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">import React from &apos;react&apos;;</div><div class="line">import &#123; render &#125; from &apos;react-dom&apos;</div><div class="line">import &#123; Router, Route, hashHistory, IndexRoute,Link &#125; from &apos;react-router&apos;;</div><div class="line">import Home from &apos;./modules/_public/Home&apos;;</div><div class="line">import Dashboard from &apos;./modules/_public/Dashboard&apos;;</div><div class="line">import NotFound from &apos;./modules/_public/NotFound&apos;;</div><div class="line">const routerConfig = [</div><div class="line">    &#123;</div><div class="line">path: &apos;/&apos;,</div><div class="line">component: Dashboard, //默认面板</div><div class="line">indexRoute: &#123; component: Home &#125;,//当刚开始进入，什么路由也没有的时候加载</div><div class="line">breadcrumbName:&apos;首页&apos;,</div><div class="line">childRoutes: [</div><div class="line">require(&apos;./modules/circle&apos;)//子路由地址</div><div class="line">]</div><div class="line">    &#125;,</div><div class="line">&#123;</div><div class="line">path: &apos;*&apos;,</div><div class="line">component: Dashboard,</div><div class="line">indexRoute:&#123;component:NotFound&#125;//当什么路由地址没有的时候加载</div><div class="line">&#125;</div><div class="line">];</div><div class="line">render((</div><div class="line">&lt;Router  history=&#123;hashHistory&#125; routes=&#123;routerConfig&#125; /&gt;</div><div class="line">), document.getElementById(&apos;app&apos;));</div><div class="line">上面的Home Dashboard NotFound 分别对应下面的三个模块</div></pre></td></tr></table></figure>
<h3 id="2-子路由地址"><a href="#2-子路由地址" class="headerlink" title="2 子路由地址"></a>2 子路由地址</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div></pre></td><td class="code"><pre><div class="line">require(&apos;./modules/circle&apos;)//子路由地址</div><div class="line">从这个地址进入子路由</div><div class="line"></div><div class="line">进入这个子路由 ，先执行getChildRoutes 然后执行 getComponent这个</div><div class="line">getChildRoutes  这个是子路由地址</div><div class="line">getComponent    这个是 面板地址 就是本页加载的地方</div><div class="line"></div><div class="line">module.exports=&#123;</div><div class="line">path:&apos;circle&apos;,</div><div class="line">breadcrumbName:&quot;圈子&quot;,</div><div class="line">getChildRoutes(location,callback)&#123;</div><div class="line">require.ensure([],(require)=&gt;&#123;</div><div class="line">            callback(null,[</div><div class="line">                require(&apos;./routes/items&apos;)//这个子路由</div><div class="line">])</div><div class="line">        &#125;);</div><div class="line">&#125;,</div><div class="line">getComponent(nextState,callback)&#123;</div><div class="line">require.ensure([],(require)=&gt;&#123;</div><div class="line"></div><div class="line">            callback(null,require(&apos;./components/circle.jsx&apos;))//这个是跳转的面板</div><div class="line">&#125;)</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">走到这里，先进入这个页面的circle.jsx中</div><div class="line"></div><div class="line">这是circle.jsx</div><div class="line">当点击圈子的时候 进入子路由的index.js</div><div class="line"></div><div class="line">module.exports=&#123;</div><div class="line">path:&apos;items&apos;,</div><div class="line">getChildRoutes(location,callback)&#123;</div><div class="line">require.ensure([],(require)=&gt;&#123;</div><div class="line">           callback(null,[</div><div class="line">               require(&apos;./routes/item&apos;)</div><div class="line">           ])</div><div class="line">        &#125;);</div><div class="line">&#125;,</div><div class="line">getComponents(nextSate,callback)&#123;</div><div class="line">require.ensure([],(require)=&gt;&#123;</div><div class="line">            callback(null,&#123;</div><div class="line">header:require(&apos;./components/header.jsx&apos;),</div><div class="line">main:require(&apos;./components/items.jsx&apos;),</div><div class="line">footer:require(&apos;./components/footer.jsx&apos;)</div><div class="line">            &#125;);</div><div class="line">&#125;);</div><div class="line">&#125;</div><div class="line">&#125;;</div><div class="line">传递 header main footer 三个面板给circle.jsx</div><div class="line">import React,&#123;Component&#125; from &apos;react&apos;;</div><div class="line">import ReactDOM from &apos;react-dom&apos;;</div><div class="line">import Dashboard from &apos;./dashboard.jsx&apos;;</div><div class="line">import &#123;Affix&#125; from &apos;antd&apos;;</div><div class="line"></div><div class="line">class Circle extends Component&#123;</div><div class="line">render() &#123;</div><div class="line">        console.log(&quot;adsfa this.props: &quot;, this.props);</div><div class="line">let &#123; header, main, footer, children, params &#125; = this.props,content;</div><div class="line">console.log(&quot;这是header&quot;,header);</div><div class="line">if (header || main || footer) &#123;</div><div class="line">            content = (</div><div class="line">&lt;div className=&quot;content_group&quot;&gt;</div><div class="line">&#123;(!!header) ? (&lt;Affix offset=&#123;20&#125;&gt;&lt;div className=&quot;content_header&quot;&gt;&#123;header&#125;&lt;/div&gt;&lt;/Affix&gt;) : &quot;&quot;&#125;</div><div class="line">                    &#123;(!!main) ? (&lt;div className=&quot;content_main&quot;&gt;&#123;main&#125;&lt;/div&gt;) : &quot;&quot;&#125;</div><div class="line">                    &#123;(!!footer) ? (&lt;div className=&quot;content_footer&quot;&gt;&#123;footer&#125;&lt;/div&gt;) : &quot;&quot;&#125;</div><div class="line">&lt;/div&gt;</div><div class="line">)</div><div class="line">        &#125; else if (children) &#123;</div><div class="line">            content = children</div><div class="line">&#125; else &#123;</div><div class="line">            content = &lt;Dashboard /&gt;</div><div class="line">&#125;</div><div class="line"></div><div class="line">return (</div><div class="line">&lt;div&gt;</div><div class="line">&#123;content&#125;</div><div class="line">&lt;/div&gt;</div><div class="line">)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">module.exports=Circle;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div></pre></td><td class="code"><pre><div class="line">在某一个路由中需要执行</div><div class="line"></div><div class="line">首先执行第一个index.js,这是index.jsx内容</div><div class="line">module.exports=&#123;</div><div class="line">path:&apos;items&apos;,</div><div class="line">getChildRoutes(location,callback)&#123;</div><div class="line">require.ensure([],(require)=&gt;&#123;</div><div class="line">           callback(null,[</div><div class="line">               require(&apos;./routes/item&apos;)</div><div class="line">           ])</div><div class="line">        &#125;);</div><div class="line">&#125;,</div><div class="line">getComponents(nextSate,callback)&#123;</div><div class="line">require.ensure([],(require)=&gt;&#123;</div><div class="line">            callback(null,&#123;</div><div class="line">header:require(&apos;./components/header.jsx&apos;),</div><div class="line">main:require(&apos;./components/items.jsx&apos;),</div><div class="line">footer:require(&apos;./components/footer.jsx&apos;)</div><div class="line">            &#125;);</div><div class="line">&#125;);</div><div class="line">&#125;</div><div class="line">&#125;;</div><div class="line">然后又会从mian.js中开始加载（每一次执行一个路由都会从头开始加载），加载到circle.jsx,这是circle</div><div class="line">import React, &#123; Component &#125; from &apos;react&apos;</div><div class="line">import Dashboard from &apos;./dashboard.jsx&apos;</div><div class="line">import &#123; Affix &#125; from &apos;antd&apos;;</div><div class="line"></div><div class="line">class Circle extends Component &#123;</div><div class="line">render() &#123;</div><div class="line">let &#123; header, main, footer, children, params &#125; = this.props, content</div><div class="line">if (header || main || footer) &#123;</div><div class="line">            content = (</div><div class="line">&lt;div className=&quot;content_group&quot;&gt;</div><div class="line">&#123;(!!header) ? (&lt;Affix offset=&#123;20&#125;&gt;&lt;div className=&quot;content_header&quot;&gt;&#123;header&#125;&lt;/div&gt;&lt;/Affix&gt;) : &quot;&quot;&#125;</div><div class="line">                    &#123;(!!main) ? (&lt;div className=&quot;content_main&quot;&gt;&#123;main&#125;&lt;/div&gt;) : &quot;&quot;&#125;</div><div class="line">                    &#123;(!!footer) ? (&lt;div className=&quot;content_footer&quot;&gt;&#123;footer&#125;&lt;/div&gt;) : &quot;&quot;&#125;</div><div class="line">&lt;/div&gt;</div><div class="line">)</div><div class="line">        &#125; else if (children) &#123;</div><div class="line">            content = children</div><div class="line">&#125; else &#123;</div><div class="line">            content = &lt;Dashboard /&gt;</div><div class="line">&#125;</div><div class="line"></div><div class="line">return (</div><div class="line">&lt;div&gt;</div><div class="line">&#123;content&#125;</div><div class="line">&lt;/div&gt;</div><div class="line">)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">在本页面中加载header main footer数据，并调用了3中的items.js中的数据。这是items.jsx</div><div class="line">class CircleItems extends Component &#123;</div><div class="line">render() &#123;</div><div class="line">return (</div><div class="line">&lt;div&gt;</div><div class="line">&#123;</div><div class="line">this.props.children</div><div class="line">||</div><div class="line">&lt;Table columns=&#123;columns&#125; dataSource=&#123;data&#125;</div><div class="line">expandedRowRender=&#123;record =&gt; &lt;p&gt;&#123;record.description&#125;&lt;/p&gt;&#125;/&gt;</div><div class="line">&#125;</div><div class="line">&lt;/div&gt;</div><div class="line">)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">module.exports = CircleItems;</div><div class="line">这里有一个或（||）的判断，如果this.props.children为true时，下面的就不执行了，如果为false的时候，就会执行下面的table</div><div class="line">因为没有执行子路由，这里的this.props.children为false，执行下面的table</div><div class="line">然后就会给circle.jsx传递数据，加载出来下面的页面</div><div class="line"></div><div class="line"></div><div class="line">当点击详细信息的时候就会执行4步的index.js</div><div class="line">module.exports = &#123;</div><div class="line">path: &apos;id/:circleID&apos;,</div><div class="line">breadcrumbName:&quot;项目 :circleID&quot;,</div><div class="line">getComponent(nextState, callback) &#123;</div><div class="line">require.ensure([], (require) =&gt; &#123;</div><div class="line">            callback(null, require(&apos;./components/item&apos;))</div><div class="line">        &#125;)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">这里执行了1中index.js的子路由</div><div class="line">就会触发items.jsx中的this.props.children为true，然后就会走子路由。然后走4步的index.js</div><div class="line">跳到item.jsx中</div><div class="line">import React, &#123; Component &#125; from &apos;react&apos;</div><div class="line"></div><div class="line">class circleItem extends Component &#123;</div><div class="line">render() &#123;</div><div class="line">let properties = this.props;</div><div class="line">return (</div><div class="line">&lt;div&gt;</div><div class="line">此处是具体某一条数据的详细信息页，根据传入的参数（&#123;properties.params.circleID&#125;）读取接口，显示数据，进行逻辑操作。</div><div class="line">&lt;/div&gt;</div><div class="line">)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">module.exports = circleItem</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Redux 基础搭建和功能介绍]]></title>
      <url>https://qingege.github.io/2016/07/28/react/rudux/rudux_demo/</url>
      <content type="html"><![CDATA[<p>state        ———————————&gt;store &lt;———————–Action<br>（数据）                 储存       （仓库）      改变            （触发）</p>
<p>Action 的组成<br>                (state,action)=&gt;state  的纯函数<br>  store.dispatch()</p>
<a id="more"></a>
<h3 id="redux是管理State的一个东东，所有State都需要经过redux来操作。"><a href="#redux是管理State的一个东东，所有State都需要经过redux来操作。" class="headerlink" title="redux是管理State的一个东东，所有State都需要经过redux来操作。"></a>redux是管理State的一个东东，所有State都需要经过redux来操作。</h3><h4 id="redux中有三个基本概念，Action，Reducer，Store。"><a href="#redux中有三个基本概念，Action，Reducer，Store。" class="headerlink" title="redux中有三个基本概念，Action，Reducer，Store。"></a>redux中有三个基本概念，Action，Reducer，Store。</h4><h2 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h2><p>Actions 是把数据从应用传到 store 的有效载荷。它是 store 数据的唯一来源。用法是通过 store.dispatch() 把 action 传到 store。</p>
<p>Action 有两个作用。<br>用Action来分辨具体的执行动作。比如是create 还是delete？或者是update？<br>操作数据首先得有数据。比如添加数据得有数据，删除数据得有ID。。action就是存这些数据的地方<br>（我的理解：Action 只是执行操作这些数据的动作，就是只下达命令（如：去改变数据））<br>Reducer</p>
<p>Action 只是描述了有事情发生了这一事实，并没有指明应用如何更新 state。这是 reducer 要做的事情。</p>
<p>Action就像leader，告诉我们应该做哪些事，并且给我们提供‘资源（就是上面说的数据）’，真正干活的是苦逼的Reducer。。</p>
<p>（我的理解：action，只下达命令，告诉了我们怎么操作这些数据，然后让reducer去执行（如：reducer就去执行这个updata动作））</p>
<h3 id="Store"><a href="#Store" class="headerlink" title="Store"></a>Store</h3><p>一个应用只有一个Store。一个应用只有一个Store。一个应用只有一个Store。<br>重要的事情放在前面说，而且说三遍。。</p>
<p>上面章节中，我们学会了使用 action 来描述“发生了什么”，和使用 reducers 来根据 action 更新 state 的用法。<br>Store 就是把它们联系到一起的对象。Store 有以下职责：<br>维持应用的 state；</p>
<ul>
<li>提供 getState() 方法获取 state；</li>
<li>提供 dispatch(action) 方法更新 state；</li>
<li>通过 subscribe(listener) 注册监听器。</li>
<li>Store提供了一些方法。让我们很方便的操作数据。<br>我们不用关心Reducer和Action是怎么关联在一起的，Store已经帮我们做了这些事。。<br>（我的理解：store是一个仓库，Action发出命令，通过store中的方法（比如dispatch（action））让reducer去执行它，reducer执行完，就更改了store里面的数据。）</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"> reducer，形式为 (state, action) =&gt; state 的纯函数 下面就是一个 reducer</div><div class="line">functioncounter(state =0, action)&#123;switch(action.type)&#123;case&apos;INCREMENT&apos;:return state +1;case&apos;DECREMENT&apos;:return state -1;default:return state;&#125;&#125;</div><div class="line"></div><div class="line">```</div><div class="line">详细介绍</div><div class="line"></div><div class="line">这部分主要讲解redux如何在项目中使用。</div><div class="line"> #### Action</div><div class="line"></div><div class="line">Action 是一个普通对象。</div><div class="line">（我的理解：Action下达命令是通过type来执行的，type就是执行的动作（如：&#123;type:&apos;add&apos;，Num:&apos;1&apos;&#125; 就是说给Num这个数据，增加一些数据。））</div><div class="line">redux约定 Action 内使用一个字符串类型的 type 字段来表示将要执行的动作。</div></pre></td></tr></table></figure>
<p>{<br>    type:’ADD_ITEM’}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">除了 type 之外，Action可以存放一些其他的想要操作的数据。例如：</div></pre></td></tr></table></figure></p>
<p>{<br>    type:’ADD_ITEM’,<br>    text:’我是Berwin’}<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">上面例子表示</div><div class="line">我要创建一条数据</div><div class="line">创建的数据为大概是这样的</div></pre></td></tr></table></figure></p>
<p>{<br>    text:’我是Berwin’}<br>但在实际应用中，我们需要一个函数来为我们创建Action。这个函数叫做actionCreator。它看起来是这样的：<br>function addItem(text){return{<br>    type: types.ADD_ITEM,<br>    text<br>  }}<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">（我的理解：Action通过type去说明这个动作是干什么的，text就是执行这个动作需要的数据，addItem就是把type这个动作和text这个数据提供出来，他们返回的是一个对象，并没有去执行这个动作，只是把需要的数据提供出来了）</div><div class="line"></div><div class="line">### Reducer</div><div class="line"></div><div class="line">Reducer 是一个普通的回调函数。</div><div class="line">当它被Redux调用的时候会为他传递两个参数State 和 Action。</div><div class="line">Reducer会根据 Action 的type来对旧的 State 进行操作。返回新的State。</div><div class="line">看起来是下面这样的：</div></pre></td></tr></table></figure></p>
<p>/**</p>
<ul>
<li>添加<br>*</li>
<li>@param {String} 添加的文字<br>*</li>
<li>@return {Object} 将要添加的数据<br><em>/<br>let createItem = text =&gt;{<br>let time =Date.now();return{<br> id:Math.random().toString(36).split(‘.’).join(‘’),<br> addTime: time,<br> updateTime: time,<br> status:false,<br> text<br>}}/*</em></li>
<li>Reducer<br>*</li>
<li>@param State</li>
<li>@param Action<br>*</li>
<li>@return new State<br>*/<br>let reducer =(state =[], action)=&gt;{switch(action.type){case ADD_ITEM:return[createItem(action.text),…state]default:return state<br>}}<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">Reducer很简单，但有三点需要注意</div><div class="line">不要修改 state。</div><div class="line">在 default 情况下返回旧的 state。遇到未知的 action 时，一定要返回旧的 state。</div><div class="line">如果没有旧的State，就返回一个initialState，这很重要！！！</div><div class="line">这是一部分核心源码：</div><div class="line">// currentState 是当前的State，currentReducer 是当前的Reducer</div><div class="line">currentState = currentReducer(currentState, action);</div><div class="line">如果在default或没有传入旧State的情况下不返回旧的State或initialState。。。那么当前的State会被重置为undefined！！</div><div class="line">在使用combineReducers方法时，它也会检测你的函数写的是否标准。如果不标准，那么会抛出一个大大的错误！！</div><div class="line">combineReducers</div><div class="line"></div><div class="line">真正开发项目的时候State会涉及很多功能，在一个Reducer处理所有逻辑会非常混乱，，所以需要拆分成多个小Reducer，每个Reducer只处理它管理的那部分State数据。然后在由一个主rootReducers来专门管理这些小Reducer。</div><div class="line">Redux提供了一个方法 combineReducers 专门来管理这些小Reducer。</div><div class="line">它看起来是下面这样：</div></pre></td></tr></table></figure>
</li>
</ul>
<p>/**</p>
<ul>
<li>这是一个子Reducer<br>*</li>
<li>@param State</li>
<li>@param Action<br>*</li>
<li>@return new State<br><em>/<br>let list =(state =[], action)=&gt;{switch(action.type){case ADD_ITEM:return[createItem(action.text),…state]default:return state<br>}}// 这是一个简单版的子Reducer，它什么都没有做。<br>let category =(state ={}, action)=&gt; state;/*</em></li>
<li>这是一个主Reducer<br>*</li>
<li>@param State</li>
<li>@param Action<br>*</li>
<li>@return new State<br>*/<br>let rootReducers = combineReducers({list, category});<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">combineReducers 生成了一个类似于Reducer的函数。为什么是类似于，因为它不是真正的Reducer，它只是一个调用Reducer的函数，只不过它接收的参数与真正的Reducer一模一样~</div><div class="line">** 这是一部分核心源码：**</div><div class="line"></div><div class="line">function combineReducers(reducers)&#123;// 过滤reducers，把非function类型的过滤掉~var finalReducers = pick(reducers,(val)=&gt;typeof val ===&apos;function&apos;);// 一开始我一直以为这个没啥用，后来我发现，这个函数太重要了。它在一开始，就已经把你的State改变了。变成了，Reducer的key 和 Reducer返回的initState组合。var defaultState = mapValues(finalReducers,()=&gt;undefined);returnfunction combination(state = defaultState, action)&#123;// finalReducers 是 reducersvar finalState = mapValues(finalReducers,(reducer, key)=&gt;&#123;// state[key] 是当前Reducer所对应的State，可以理解为当前的Statevar previousStateForKey = state[key];var nextStateForKey = reducer(previousStateForKey, action);return nextStateForKey;&#125;);// finalState 是 Reducer的key和stat的组合。。&#125;&#125;</div><div class="line">从上面的源码可以看出，combineReducers 生成一个类似于Reducer的函数combination。</div><div class="line">当使用combination的时候，combination会把所有子Reducer都执行一遍，子Reducer通过action.type 匹配操作，因为是执行所有子Reducer，所以如果两个子Reducer匹配的action.type是一样的，那么都会成功匹配。</div><div class="line"></div><div class="line">### Store</div><div class="line"></div><div class="line">上面已经介绍什么是Store，以及它是干什么的，这里我就讲讲如何创建Store，以及如何使用Store的方法。</div><div class="line">创建Store非常简单。createStore 有两个参数，Reducer 和 initialState。</div><div class="line">let store = createStore(rootReducers, initialState);</div><div class="line">store有四个方法。</div><div class="line">getState： 获取应用当前State。</div><div class="line">subscribe：添加一个变化监听器。</div><div class="line">dispatch：分发 action。修改State。</div><div class="line">replaceReducer：替换 store 当前用来处理 state 的 reducer。</div><div class="line">常用的是dispatch，这是修改State的唯一途径，使用起来也非常简单，他看起来是这样的~</div></pre></td></tr></table></figure>
</li>
</ul>
<p>/**</p>
<ul>
<li>创建Action<br>*</li>
<li>@param 添加的数据<br>*</li>
<li>@return {Object} Action<br><em>/function addItem(text){return{<br> type: types.ADD_ITEM,<br> text<br>}}<br>let list =(state =[], action)=&gt;{switch(action.type){case ADD_ITEM:return[createItem(action.text),…state]default:return state<br>}}// 这是一个简单版的子Reducer，它什么都没有做。<br>let category =(state ={}, action)=&gt; state;/*</em></li>
<li>这是一个主Reducer<br>*</li>
<li>@param State</li>
<li>@param Action<br>*</li>
<li>@return new State<br>*/<br>let rootReducers = combineReducers({list, category});<br>let store = createStore(rootReducers, initialState);<br>// 新增数据<br>store.dispatch(addItem(‘Read the docs’));<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">这是一部分核心源码：</div></pre></td></tr></table></figure>
</li>
</ul>
<p>function dispatch(action){// currentReducer 是当前的Reducer<br>  currentState = currentReducer(currentState, action);</p>
<p>  listeners.slice().forEach(function(listener){return listener();});return action;}<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">可以看到其实就是把当前的Reducer执行了。并且传入State和Action。</div><div class="line">State哪来的？</div><div class="line">State其实一直在Redux内部保存着。并且每次执行currentReducer都会更新。在上面代码第一行可以看到。</div><div class="line"></div><div class="line"></div><div class="line">（我的理解：</div><div class="line">1  首先创建Action知道需要干什么</div></pre></td></tr></table></figure></p>
<p>functionaddItem(text){return{<br>    type: types.ADD_ITEM,<br>    text<br>  }}<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">2  然后根据Action创建Reducer，去执行怎么干</div></pre></td></tr></table></figure></p>
<p>let list =(state =[], action)=&gt;{switch(action.type){case ADD_ITEM:return[createItem(action.text),…state]default:return state<br>  }<br>}<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">其中有个合并每个小的Reducer的方法</div><div class="line">combineReducers();</div><div class="line">使用方法如下：</div></pre></td></tr></table></figure></p>
<p>let list =(state =[], action)=&gt;{switch(action.type){case ADD_ITEM:return[createItem(action.text),…state]default:return state<br>  }}// 这是一个简单版的子Reducer，它什么都没有做。<br>let category =(state ={}, action)=&gt; state;/**</p>
<ul>
<li>这是一个主Reducer<br>*</li>
<li>@param State</li>
<li>@param Action<br>*</li>
<li>@return new State<br>*/<br>let rootReducers = combineReducers({list, category});<br>3 利用store的方法来联系起来Action和Reducer ，通过这个dispatch()方法来更新store<br>let store = createStore(rootReducers, initialState);<br>// 新增数据<br>store.dispatch(addItem(‘Read the docs’));<br>）<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line">React-Redux</div><div class="line"></div><div class="line">Redux 是独立的，它与React没有任何关系。React-Redux是官方提供的一个库，用来结合redux和react的模块。</div><div class="line">React-Redux提供了两个接口Provider、connect。</div><div class="line">Provider</div><div class="line"></div><div class="line">Provider是一个React组件，它的作用是保存store给子组件中的connect使用。</div><div class="line">通过getChildContext方法把store保存到context里。</div><div class="line">后面connect中会通过context读取store。</div><div class="line">它看起来是这个样子的：</div><div class="line">&lt;Providerstore=&#123;this.props.store&#125;&gt;&lt;h1&gt;Hello World!&lt;/h1&gt;&lt;/Provider&gt;</div><div class="line"></div><div class="line">这是一部分核心源码：</div><div class="line"></div><div class="line">getChildContext()&#123;return&#123; store:this.store &#125;&#125;</div><div class="line"></div><div class="line">constructor(props, context)&#123;super(props, context)this.store = props.store</div><div class="line">&#125;</div><div class="line">可以看到，先获取store，然后用 getChildContext 把store保存起来~</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">connect</div><div class="line"></div><div class="line">connect 会把State和dispatch转换成props传递给子组件。它看起来是下面这样的：</div><div class="line">import*as actionCreators from&apos;./actionCreators&apos;import&#123; bindActionCreators &#125;from&apos;redux&apos;function mapStateToProps(state)&#123;return&#123; todos: state.todos &#125;&#125;function mapDispatchToProps(dispatch)&#123;return&#123; actions: bindActionCreators(actionCreators, dispatch)&#125;&#125;exportdefault connect(mapStateToProps, mapDispatchToProps)(Component)</div><div class="line">它会让我们传递一些参数：mapStateToProps，mapDispatchToProps，mergeProps（可不填）和React组件。</div><div class="line">之后这个方法会进行一系列的黑魔法，把state，dispatch转换成props传到React组件上，返回给我们使用。</div><div class="line"></div><div class="line">mapStateToProps：</div><div class="line"></div><div class="line">mapStateToProps 是一个普通的函数。</div><div class="line">当它被connect调用的时候会为它传递一个参数State。</div><div class="line">mapStateToProps需要负责的事情就是 返回需要传递给子组件的State，返回需要传递给子组件的State，返回需要传递给子组件的State，（重要的事情说三遍。。。。）然后connect会拿到返回的数据写入到react组件中，然后组件中就可以通过props读取数据啦~~~~</div><div class="line">它看起来是这样的：</div><div class="line">function mapStateToProps(state)&#123;return&#123; list: state.list &#125;&#125;</div><div class="line">因为state是全局State，里面包含整个项目的所有State，但是我不需要拿到所有State，我只拿到我需要的那部分State即可，所以需要返回 state.list 传递给组件</div><div class="line"></div><div class="line">mapDispatchToProps：</div><div class="line"></div><div class="line">与mapStateToProps很像，mapDispatchToProps也是一个普通的函数。</div><div class="line">当它被connect调用的时候会为它传递一个参数dispatch。</div><div class="line">mapDispatchToProps负责返回一个 dispatchProps</div><div class="line">dispatchProps 是actionCreator的key和dispatch(action)的组合。</div><div class="line">dispatchProps 看起来长这样：</div><div class="line">&#123;</div><div class="line">  addItem:(text)=&gt; dispatch(action)&#125;</div><div class="line">connect 收到这样的数据后，会把它放到React组件上。然后子组件就可以通过props拿到addItem并且使用啦。</div><div class="line">this.props.addItem(&apos;Hello World~&apos;);</div><div class="line">如果觉得复杂，不好理解，，那我用大白话描述一下</div><div class="line">就是通过mapDispatchToProps这个方法，把actionCreator变成方法赋值到props，每当调用这个方法，就会更新State。。。。额，，这么说应该好理解了。。</div><div class="line"></div><div class="line">bindActionCreators：</div><div class="line"></div><div class="line">但如果我有很多个Action，总不能手动一个一个加。Redux提供了一个方法叫 bindActionCreators。</div><div class="line">bindActionCreators 的作用就是将 Actions 和 dispatch 组合起来生成 mapDispatchToProps 需要生成的内容。</div><div class="line">它看起来像这样：</div></pre></td></tr></table></figure>
</li>
</ul>
<p>let actions ={<br>  addItem:(text)=&gt;{<br>    type: types.ADD_ITEM,<br>    text<br>  }}</p>
<p>bindActionCreators(actions, dispatch);// @return {addItem: (text) =&gt; dispatch({ type: types.ADD_ITEM, text })}</p>
<p>这是一部分核心源码：</p>
<p>function bindActionCreator(actionCreator, dispatch){return(…args)=&gt; dispatch(actionCreator(…args));}// mapValues： map第一个参数的每一项，返回对象，key是key，value是第二个参数返回的数据/*</p>
<ul>
<li>mapValues： map第一个参数的每一项，返回对象，key是key，value是第二个参数返回的数据<br>*</li>
<li>@param actionCreators</li>
<li>@param dispatch<br>*</li>
<li>@return {actionKey: (…args) =&gt; dispatch(actionCreator(…args))}<br>*/exportdefaultfunction bindActionCreators(actionCreators, dispatch){return mapValues(actionCreators, actionCreator =&gt;<br> bindActionCreator(actionCreator, dispatch));}<br>   ```<br>可以看到，bindActionCreators 执行这个方法之后，它把 actionCreators 的每一项的 key 不变，value 变成 dispatch(actionCreator(…args)) 这玩意，这表示， actionCreator 已经变成了一个可执行的方法，执行这个方法，就会执行 dispatch 更新数据。。</li>
</ul>
]]></content>
    </entry>
    
  
  
</search>
